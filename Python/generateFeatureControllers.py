#!/usr/bin/env python

'''
    Copyright (C) 2014 Parrot SA

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in
      the documentation and/or other materials provided with the 
      distribution.
    * Neither the name of Parrot nor the names
      of its contributors may be used to endorse or promote products
      derived from this software without specific prior written
      permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
    OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
    OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.
'''

import sys
import os
import re

MYDIR=os.path.abspath(os.path.dirname(sys.argv[0]))
if '' == MYDIR:
    MYDIR=os.getcwd()

sys.path.append('%(MYDIR)s/../../ARBuildUtils/Utils/Python' % locals())

from ARFuncs import *
from ARCommandsParser import *
from ARControllerUtils import *

def generateFeatureControllers (allFeatures, SRC_DIR, INC_DIR):

    ARPrint ('generateFeatureControllers ...')

    #########################################
    # Write Feature controller header file  #
    #########################################

    #for feature in allFeatures: # see automake all source of folder !!!!
        
    #ARPrint ('feature.name = ' + feature.name) # see automake all source of folder !!!!

    #className = ARTypeName (MODULE_FEATURE, feature.name, '')  # see automake all source of folder !!!!
    includeDefine = '_' + MODULE_FEATURE + '_H_' #includeDefine = '_' + ARMacroName (MODULE_FEATURE, feature.name, 'H') + '_'  # see automake all source of folder !!!!

    headerFileName = 'ARCONTROLLER_Feature.h' #headerFileName = className + '.h'!!!!
    filepath = INC_DIR + headerFileName
    hfile = open (filepath, 'w')

    hfile.write ('/**********************************************************\n')
    hfile.write (' *            AUTOGENERATED FILE                          *\n')
    hfile.write (' *             DO NOT MODIFY IT                           *\n')
    hfile.write (' *                                                        *\n')
    hfile.write (' * To add new commands :                                  *\n')
    hfile.write (' *  - Modify ../Xml/commands.xml file                     *\n')
    hfile.write (' *  - Re-run generateFeatureControllers.py script         *\n')
    hfile.write (' *                                                        *\n')
    hfile.write (' **********************************************************/\n')
    hfile.write ('\n')

    hfile.write ('/**\n')
    hfile.write ('* @file '+headerFileName+'\n')
    hfile.write ('* @brief Feature controller allow to send command related of a Feature.\n') #hfile.write ('* @brief Feature controller allow to send command related of '+feature.name+' Feature.\n')
    hfile.write ('*/\n')
    hfile.write ('\n')

    hfile.write ('#ifndef '+includeDefine+'\n')
    hfile.write ('#define '+includeDefine+'\n')
    hfile.write ('\n')

    hfile.write ('#include <stdlib.h>\n')
    hfile.write ('\n')
    hfile.write ('#include <libARSAL/ARSAL_Print.h>\n')
    hfile.write ('#include <libARSAL/ARSAL_Mutex.h>\n')
    hfile.write ('#include <libARCommands/ARCommands.h>\n')
    hfile.write ('#include <uthash/uthash.h>\n')
    hfile.write ('\n')
    hfile.write ('#include <libARController/ARCONTROLLER_Error.h>\n')
    hfile.write ('#include <libARController/ARCONTROLLER_Network.h>\n')
    hfile.write ('#include <libARController/ARCONTROLLER_DICTIONARY_Key.h>\n')
    hfile.write ('#include <libARController/ARCONTROLLER_Dictionary.h>\n')
    hfile.write ('\n')

    for feature in allFeatures: # see automake all source of folder !!!!!!!!!!!!!!
        
        ARPrint ('feature.name = ' + feature.name) # see automake all source of folder !!!!
        className = ARTypeName (MODULE_FEATURE, feature.name, '')  # see automake all source of folder !!!!
        classPrivName = ARTypeName (MODULE_FEATURE, feature.name, 'Private')  # see automake all source of folder !!!!
        
        hfile.write ('/*******************************\n') # see automake all source of folder !!!!!!!!
        hfile.write (' * --- FEATURE '+feature.name+' --- \n') # see automake all source of folder !!!!!!!!
        hfile.write (' ******************************/\n') # see automake all source of folder !!!!!!!!
        hfile.write ('\n')
        
        hfile.write ('/**\n')
        hfile.write (' * @brief Private part of '+className+'.\n')
        hfile.write (' */\n')
        hfile.write ('typedef struct '+classPrivName+' '+classPrivName+';\n')
        hfile.write ('\n')
        
        hfile.write ('/**\n')
        hfile.write (' * @brief Feature controller allow to send command related of '+feature.name+' Feature.\n')
        for comment in feature.comments:
            hfile.write (' * ' + comment+'\n')
        hfile.write (' */\n')
        hfile.write ('typedef struct '+className+' '+className+';\n')
        hfile.write ('\n')
        
        hfile.write ('/**\n')
        hfile.write (' * @brief Create a new '+feature.name+' Feature Controller\n')
        hfile.write (' * @warning This function allocate memory\n')
        hfile.write (' * @post ' + ARFunctionName (MODULE_FEATURE, feature.name, 'Delete')+'() must be called to delete the Feature Controller and free the memory allocated.\n')
        hfile.write (' * @param[in] networkController The networkController used to send commands ; can be NULL and defind later with '+ARFunctionName(MODULE_FEATURE, feature.name, 'SetNetworkController')+'().\n')
        hfile.write (' * @param[out] error executing error.\n')
        hfile.write (' * @return the new '+feature.name+' Feature Controller\n')
        hfile.write (' * @see ' + ARFunctionName (MODULE_FEATURE, feature.name, 'Delete')+'\n')
        hfile.write (' */\n')
        hfile.write (''+className+' *' + ARFunctionName (MODULE_FEATURE, feature.name, 'New')+' (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error);\n')
        hfile.write ('\n')
        
        hfile.write ('/**\n')
        hfile.write (' * @brief Delete the '+feature.name+' Feature Controller\n')
        hfile.write (' * @warning This function free memory\n')
        hfile.write (' * @param feature The feature controller to delete\n')
        hfile.write (' * @see ' + ARFunctionName (MODULE_FEATURE, feature.name, 'New')+'\n')
        hfile.write (' */\n')
        hfile.write ('void ' + ARFunctionName (MODULE_FEATURE, feature.name, 'Delete')+' ('+className+' **feature);\n')
        hfile.write ('\n')
        
        hfile.write ('/**\n')
        hfile.write (' * @brief Get the dictionay of the '+feature.name+' Feature Controller\n')
        hfile.write (' * @param feature The feature controller owning the dictionary to get\n')
        hfile.write (' * @param[out] error executing error.\n')
        hfile.write (' */\n')
        hfile.write (''+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'COMMANDS')+' *' + ARFunctionName (MODULE_FEATURE, feature.name, 'GetDictionary')+' ('+className+' *feature, eARCONTROLLER_ERROR *error);\n')
        hfile.write ('\n')
            
        hfile.write ('/**\n')
        hfile.write (' * @brief Add a callback to use when a command in project <code>' + ARCapitalize (feature.name) + '</code> is received\n')
        hfile.write (' * @param feature The feature controller receiving the command.\n')
        hfile.write (' * @param[in] callback the callback to add.\n')
        hfile.write (' * @param[in] commandKey Key of the command which the callback must be associated.\n')
        hfile.write (' * @param[out] error executing error.\n')
        hfile.write (' * @param[int] customData custom data given as parameter to the callback.\n')
        hfile.write (' * @see '+ARFunctionName(MODULE_FEATURE, feature.name, 'removeCallback')+'.\n')
        hfile.write (' */\n')
        hfile.write ('eARCONTROLLER_ERROR '+ARFunctionName(MODULE_FEATURE, feature.name, 'addCallback')+' ('+className+' *feature, '+defineNotificationDef()+' commandKey, '+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'CALLBACK')+' callback, void *customData);\n')
        hfile.write ('\n')
        
        hfile.write ('/**\n')
        hfile.write (' * @brief Remove a callback used when a command in project <code>' + ARCapitalize (feature.name) + '</code> is received\n')
        hfile.write (' * @param feature The feature controller receiving the command.\n')
        hfile.write (' * @param[in] commandKey Key of the command which the callback must be unassociated.\n')
        hfile.write (' * @param[in] callback the callback to remove.\n')
        hfile.write (' * @param[int] customData The custom data given to the register.\n')
        hfile.write (' * @param[out] error executing error.\n')
        hfile.write (' */\n')
        hfile.write ('eARCONTROLLER_ERROR '+ARFunctionName(MODULE_FEATURE, feature.name, 'removeCallback')+' ('+className+' *feature, '+defineNotificationDef()+' commandKey, '+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'CALLBACK')+' callback, void *customData);\n')
        hfile.write ('\n')
        
        for cl in feature.classes:
            hfile.write ('/**\n')
            hfile.write (' * class: '+cl.name+' \n')
            for comment in cl.comments:
                hfile.write (' * ' + comment+'\n')
            hfile.write (' */\n')
            hfile.write ('\n')
            
            if isEvent(cl) or isState(cl):
                for cmd in cl.cmds:
                    for arg in cmd.args:
                        hfile.write ('extern const char *' + defineNotification(feature, cl, cmd, arg) + '; /**< Key of the argument </code>'+arg.name+'</code> of class <code>' + ARCapitalize (cl.name) + '</code> in feature <code>' + ARCapitalize (feature.name) + '</code> */\n')
                        
            hfile.write('\n');
            
            if not isEvent(cl) and not isState(cl):
                for cmd in cl.cmds:
                    hfile.write ('/**\n')
                    hfile.write (' * @brief Send a command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in feature <code>' + ARCapitalize (feature.name) + '</code>\n')
                    for comment in cmd.comments:
                        hfile.write (' * ' + comment+'\n')
                    hfile.write (' * @param feature feature owning the commands\n')
                    for arg in cmd.args:
                        for comm in arg.comments:
                            hfile.write (' * @param ' + arg.name + ' ' + comm + '\n')
                    hfile.write (' * return executing error\n')
                    hfile.write (' */\n')
                    hfile.write ('typedef eARCONTROLLER_ERROR (*'+ sendingFunctionType (MODULE_FEATURE, feature, cl, cmd)+') ('+className+' *feature')
                    for arg in cmd.args:
                        hfile.write (', ' + xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' ' + arg.name)
                    hfile.write (');\n')
                    hfile.write ('\n')
                    
                    if cmd.buf == ARCommandBuffer.NON_ACK:
                        hfile.write ('/**\n')
                        hfile.write (' * @brief Set the parameters to send through the command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code>\n')
                        for comment in cmd.comments:
                            hfile.write (' * ' + comment+'\n')
                        hfile.write (' * @param feature feature owning the commands\n')
                        for arg in cmd.args:
                            for comm in arg.comments:
                                hfile.write (' * @param ' + arg.name + ' ' + comm + '\n')
                        hfile.write (' * return executing error\n')
                        hfile.write (' */\n')
                        hfile.write ('typedef eARCONTROLLER_ERROR (*' + setNAckFunctionType (feature, cl, cmd)+') ('+className+' *feature')
                        for arg in cmd.args:
                            hfile.write (', ' + xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' ' + arg.name)
                        hfile.write (');\n')
                        hfile.write ('\n')
                        
                        hfile.write ('/**\n')
                        hfile.write (' * @brief Send the a command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code> with the parame set beforehand \n')
                        for comment in cmd.comments:
                            hfile.write (' * ' + comment+'\n')
                        hfile.write (' * @param feature feature owning the commands\n')
                        hfile.write (' * @param cmdBuffer buffer to store the command\n')
                        hfile.write (' * @param cmdBufferSize size of the buffer\n')
                        hfile.write (' * return executing error\n')
                        hfile.write (' */\n')
                        hfile.write ('eARCONTROLLER_ERROR '+ sendNAckFunctionName (feature, cl, cmd)+' ('+className+' *feature, u_int8_t *cmdBuffer, int32_t cmdBufferSize);\n')
                        hfile.write ('\n')
                        
                        for arg in cmd.args:
                            hfile.write ('/**\n')
                            hfile.write (' * @brief Set '+arg.name+' sent through the command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code>\n')
                            for comment in cmd.comments:
                                hfile.write (' * ' + comment+'\n')
                            hfile.write (' * @param feature feature owning the commands\n')
                            for comm in arg.comments:
                                hfile.write (' * @param ' + arg.name + ' ' + comm + '\n')
                            hfile.write (' * return executing error\n')
                            hfile.write (' */\n')
                            hfile.write ('typedef eARCONTROLLER_ERROR (*' + setNAckFunctionType (feature, cl, cmd, arg)+') ('+className+' *feature, ' + xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' ' + arg.name+');\n')
                            hfile.write ('\n')
                    
            
        hfile.write ('/**\n')
        hfile.write (' * @brief Feature controller allow to send command related of '+feature.name+' Feature.\n')
        for comment in feature.comments:
            hfile.write (' * ' + comment+'\n')
        hfile.write (' */\n')
        hfile.write ('struct '+className+'\n')
        hfile.write ('{\n')
        for cl in feature.classes:
            if not isEvent(cl) and not isState(cl):
                for cmd in cl.cmds:
                    hfile.write ('    '+sendingFunctionType (MODULE_FEATURE, feature, cl, cmd)+' '+sendingFunction(cl, cmd)+';\n')
                    if cmd.buf == ARCommandBuffer.NON_ACK:
                        hfile.write ('    '+setNAckFunctionType (feature, cl, cmd)+' '+setNAckFunction(cl, cmd)+';\n')
                        for arg in cmd.args:
                            hfile.write ('    ' + setNAckFunctionType (feature, cl, cmd, arg)+' '+setNAckFunction(cl, cmd, arg)+'; /**< Send a command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in feature <code>' + ARCapitalize (feature.name) + '</code>. */\n')
                        
        hfile.write ('    '+classPrivName+' *privatePart; /**< Private part of '+className+' */\n')
        hfile.write ('};\n')
        hfile.write ('\n')
        
        hfile.write ('/**\n')
        hfile.write (' * @brief Set a NetworkController to use to send commands.\n')
        hfile.write (' * @param feature The feature controller receiving the command.\n')
        hfile.write (' * @param[in] commandKey Key of the command which the callback must be unassociated.\n')
        hfile.write (' * @param[in] networkController The networkController used to send commands ; must be not NULL.\n')
        hfile.write (' * @return error executing error.\n')
        hfile.write (' */\n')
        hfile.write ('eARCONTROLLER_ERROR '+ARFunctionName(MODULE_FEATURE, feature.name, 'SetNetworkController')+' ('+className+' *feature, ARCONTROLLER_Network_t *networkController);\n')
        hfile.write ('\n')
        
        hfile.write ('/**\n')
        hfile.write (' * @brief Get the elements of a command received.\n')
        hfile.write (' * @param feature The feature controller receiving the command.\n')
        hfile.write (' * @param[in] commandKey Key of the command.\n')
        hfile.write (' * @param[out] error executing error.\n')
        hfile.write (' * @return Element dictionary of the command ; Can be null if an error is occurred.\n')
        hfile.write (' */\n')
        hfile.write ('ARCONTROLLER_DICTIONARY_ELEMENT_t *' + ARFunctionName (MODULE_ARCONTROLLER, feature.name, 'GetCommandElements')+' ('+className+' *feature, '+defineNotificationDef()+' commandKey, eARCONTROLLER_ERROR *error);\n')
        hfile.write ('\n')
        
        
    hfile.write ('#endif /* '+includeDefine+' */\n')
    hfile.write ('\n')
    hfile.write ('// END GENERATED CODE\n')
    hfile.close () # see automake all source of folder !!!!!!!!
        
    #################################################
    # Write Feature controller private header file  #
    #################################################
        
    #for feature in allFeatures: # see automake all source of folder !!!!!!!

    ARPrint ('feature.name = ' + feature.name)

    #className = ARTypeName (MODULE_FEATURE, feature.name, '')  # see automake all source of folder !!!!
    includeDefine = '_' + MODULE_FEATURE + '_PRIVATE_H_' #includeDefine = '_' + ARMacroName (MODULE_FEATURE, feature.name, 'PRIVATE_H') + '_'  # see automake all source of folder !!!!

    headerPrivateFileName = 'ARCONTROLLER_Feature' + '.h'  #headerPrivateFileName = className + '.h' # see automake all source of folder !!!!
    filepath = SRC_DIR + headerPrivateFileName
    hPrivFile = open (filepath, 'w')

    hPrivFile.write ('/**********************************************************\n')
    hPrivFile.write (' *            AUTOGENERATED FILE                          *\n')
    hPrivFile.write (' *             DO NOT MODIFY IT                           *\n')
    hPrivFile.write (' *                                                        *\n')
    hPrivFile.write (' * To add new commands :                                  *\n')
    hPrivFile.write (' *  - Modify ../Xml/commands.xml file                     *\n')
    hPrivFile.write (' *  - Re-run generateFeatureControllers.py script         *\n')
    hPrivFile.write (' *                                                        *\n')
    hPrivFile.write (' **********************************************************/\n')
    hPrivFile.write ('\n')

    hPrivFile.write ('/**\n')
    hPrivFile.write ('* @file '+headerPrivateFileName+'\n')
    hPrivFile.write ('* @brief Feature controller allow to send command related of '+feature.name+' Feature.\n')
    hPrivFile.write ('*/\n')
    hPrivFile.write ('\n')

    hPrivFile.write ('#ifndef '+includeDefine+'\n')
    hPrivFile.write ('#define '+includeDefine+'\n')
    hPrivFile.write ('\n')
    hPrivFile.write ('#include <libARSAL/ARSAL_Mutex.h>\n')
    hPrivFile.write ('#include <libARCommands/ARCommands.h>\n')
    hPrivFile.write ('#include <libARController/ARCONTROLLER_Feature.h>\n')
    hPrivFile.write ('\n')

    hPrivFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'feature', 'DeleteCommandsDictionary')+' ('+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'COMMANDS')+' **dictionary);\n')
    hPrivFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'feature', 'DeleteArgumentsDictionary')+' ('+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'ARG')+' **dictionary);\n')
    hPrivFile.write ('\n')
        
    for feature in allFeatures: # see automake all source of folder !!!!!!!!
        
        className = ARTypeName (MODULE_FEATURE, feature.name, '')  # see automake all source of folder !!!!
        classPrivName = ARTypeName (MODULE_FEATURE, feature.name, 'Private')  # see automake all source of folder !!!!
        
        hPrivFile.write ('/*******************************\n') # see automake all source of folder !!!!!!!!
        hPrivFile.write (' * --- FEATURE '+feature.name+' --- \n') # see automake all source of folder !!!!!!!!
        hPrivFile.write (' ******************************/\n') # see automake all source of folder !!!!!!!!
        
        for cl in feature.classes:
            for cmd in cl.cmds :
                if cmd.buf == ARCommandBuffer.NON_ACK:
                    hPrivFile.write ('/**\n')
                    hPrivFile.write (' * @brief Parameters to send through the command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code>\n')
                    hPrivFile.write (' */\n')
                    hPrivFile.write ('typedef struct\n')
                    hPrivFile.write ('{\n')
                    for arg in cmd.args:
                        hPrivFile.write ('    ' + xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' '+arg.name+'; /**< */\n')
                    hPrivFile.write ('}'+structNAckType (feature, cl, cmd)+';\n')
                    hPrivFile.write ('\n')
                    
        
        hPrivFile.write ('/**\n')
        hPrivFile.write (' * @brief Private part of '+className+'.\n')
        hPrivFile.write (' */\n')
        hPrivFile.write ('struct '+classPrivName+'\n')
        hPrivFile.write ('{\n')
        hPrivFile.write ('    ARCONTROLLER_Network_t *networkController; /**<the networkController to send commands */\n')
        hPrivFile.write ('    '+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'COMMANDS')+' *dictionary; /**< stores states and settings of the device */\n')
        hPrivFile.write ('    ARCONTROLLER_Dictionary_t *commandCallbacks; /**< dictionary storing callbacks to use when the command is received. */\n')
        hPrivFile.write ('    ARSAL_Mutex_t mutex; /**< Mutex for multihreading */\n')

        for cl in feature.classes:
            for cmd in cl.cmds :
                if cmd.buf == ARCommandBuffer.NON_ACK:
                    hPrivFile.write ('    '+structNAckType (feature, cl, cmd)+' *'+structNAckName (cl, cmd)+'; /**< */\n')
                    
        hPrivFile.write ('};\n')
        hPrivFile.write ('\n')
        
        hPrivFile.write ('/**\n')
        hPrivFile.write (' * @brief Register the feature controller to be called when the commands are decoded.\n')
        hPrivFile.write (' * @param feature The feature controller to register\n')
        hPrivFile.write (' * return executing error\n')
        hPrivFile.write (' */\n')
        hPrivFile.write ('eARCONTROLLER_ERROR '+ARFunctionName (MODULE_FEATURE, feature.name, 'RegisterARCommands')+' ('+className+' *feature);\n')
        hPrivFile.write ('\n')
        
        hPrivFile.write ('/**\n')
        hPrivFile.write (' * @brief Unegister the feature controller to be called when the commands are decoded.\n')
        hPrivFile.write (' * @param feature The feature controller to unregister\n')
        hPrivFile.write (' * return executing error\n')
        hPrivFile.write (' */\n')
        hPrivFile.write ('eARCONTROLLER_ERROR '+ARFunctionName (MODULE_FEATURE, feature.name, 'UnregisterARCommands')+' ('+className+' *feature);\n')
        hPrivFile.write ('\n')
        
        for cl in feature.classes:
            hPrivFile.write ('/**\n')
            hPrivFile.write (' * class: '+cl.name+' \n')
            for comment in cl.comments:
                hPrivFile.write (' * ' + comment+'\n')
            hPrivFile.write (' */\n')
            hPrivFile.write ('\n')
            
            if not isEvent(cl) and not isState(cl):
                for cmd in cl.cmds:
                    hPrivFile.write ('/**\n')
                    hPrivFile.write (' * @brief Send a command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code>\n')
                    for comment in cmd.comments:
                        hPrivFile.write (' * ' + comment+'\n')
                    hPrivFile.write (' * @param feature feature owning the commands\n')
                    for arg in cmd.args:
                        for comm in arg.comments:
                            hPrivFile.write (' * @param ' + arg.name + ' ' + comm + '\n')
                    hPrivFile.write (' * return executing error\n')
                    hPrivFile.write (' */\n')
                    hPrivFile.write ('eARCONTROLLER_ERROR ' + sendingFunctionName (MODULE_FEATURE, feature, cl, cmd)+' ('+className+' *feature')
                    for arg in cmd.args:
                        hPrivFile.write (', ' + xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' ' + arg.name)
                    hPrivFile.write (');\n')
                    hPrivFile.write ('\n')
                    
                    if cmd.buf == ARCommandBuffer.NON_ACK:
                        hPrivFile.write ('/**\n')
                        hPrivFile.write (' * @brief Set the parameters to send through the command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code>\n')
                        for comment in cmd.comments:
                            hPrivFile.write (' * ' + comment+'\n')
                        hPrivFile.write (' * @param feature feature owning the commands\n')
                        for arg in cmd.args:
                            for comm in arg.comments:
                                hPrivFile.write (' * @param ' + arg.name + ' ' + comm + '\n')
                        hPrivFile.write (' * return executing error\n')
                        hPrivFile.write (' */\n')
                        hPrivFile.write ('eARCONTROLLER_ERROR ' + setNAckFunctionName (feature, cl, cmd)+' ('+className+' *feature')
                        for arg in cmd.args:
                            hPrivFile.write (', ' + xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' _' + arg.name)
                        hPrivFile.write (');\n')
                        hPrivFile.write ('\n')
                        
                        for arg in cmd.args:
                            hPrivFile.write ('/**\n')
                            hPrivFile.write (' * @brief Set '+arg.name+' sent through the command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code>\n')
                            for comment in cmd.comments:
                                hPrivFile.write (' * ' + comment+'\n')
                            hPrivFile.write (' * @param feature feature owning the commands\n')
                            for comm in arg.comments:
                                hPrivFile.write (' * @param ' + arg.name + ' ' + comm + '\n')
                            hPrivFile.write (' * return executing error\n')
                            hPrivFile.write (' */\n')
                            hPrivFile.write ('eARCONTROLLER_ERROR ' + setNAckFunctionName (feature, cl, cmd, arg)+' ('+className+' *feature, ' + xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' ' + arg.name +');\n')
                            hPrivFile.write ('\n')
                    
            if isEvent(cl) or isState(cl):
                for cmd in cl.cmds:
                    hPrivFile.write ('/**\n')
                    hPrivFile.write (' * @brief callback used when the command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + ' is decoded\n')
                    hPrivFile.write (' * @param feature The feature controller registred\n')
                    for arg in cmd.args:
                        for comm in arg.comments:
                            hPrivFile.write (' * @param ' + arg.name + ' ' + comm + '\n')
                    hPrivFile.write (' * @param customData customData set by the register\n')
                    hPrivFile.write (' */\n')
                    hPrivFile.write ('void '+decodeCallback (feature, cl, cmd)+' (')
                    for arg in cmd.args:
                        hPrivFile.write (xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' _' + arg.name + ', ')
                    hPrivFile.write ('void *customData);\n')
                    hPrivFile.write ('\n')
        
        
        hPrivFile.write ('\n')
        
    hPrivFile.write ('#endif /* '+includeDefine+' */\n')
    hPrivFile.write ('\n')
    hPrivFile.write ('// END GENERATED CODE\n')
    hPrivFile.close () # see automake all source of folder !!!!!!!!
        
    #################################################
    # Write Feature controller c file               #
    #################################################
        
    #for feature in allFeatures: # see automake all source of folder !!!!!!!!!!!
        
    #className = ARTypeName (MODULE_FEATURE, feature.name, '') # see automake all source of folder !!!!!!!!!!
    classTag = 'ARCONTROLLER_Feature' #classTag = ARMacroName (MODULE_FEATURE, feature.name, '') # see automake all source of folder !!!!!!!!!!

    cFileName = 'ARCONTROLLER_Feature.c' #cFileName = className + '.c' # see automake all source of folder !!!!!!!!!!
    filepath = SRC_DIR + cFileName
    cFile = open (filepath, 'w')

    cFile.write ('/**********************************************************\n')
    cFile.write (' *            AUTOGENERATED FILE                          *\n')
    cFile.write (' *             DO NOT MODIFY IT                           *\n')
    cFile.write (' *                                                        *\n')
    cFile.write (' * To add new commands :                                  *\n')
    cFile.write (' *  - Modify ../Xml/commands.xml file                     *\n')
    cFile.write (' *  - Re-run generateFeatureControllers.py script         *\n')
    cFile.write (' *                                                        *\n')
    cFile.write (' **********************************************************/\n')
    cFile.write ('\n')

    cFile.write ('/**\n')
    cFile.write ('* @file '+cFileName+'\n')
    cFile.write ('* @brief Feature controller allow to send command related of a Feature.\n') #cFile.write ('* @brief Feature controller allow to send command related of '+feature.name+' Feature.\n') # see automake all source of folder !!!!!!!!!!
    cFile.write ('*/\n')
    cFile.write ('\n')

    cFile.write ('#ifdef WIN32\n')
    cFile.write ('\n')
    cFile.write ('#include <stdint.h>\n')
    cFile.write ('\n')
    cFile.write ('typedef uint8_t u_int8_t;\n')
    cFile.write ('typedef uint16_t u_int16_t;\n')
    cFile.write ('typedef uint32_t u_int32_t;\n')
    cFile.write ('\n')
    cFile.write ('#endif\n')

    cFile.write ('#include <stdio.h>\n')

    cFile.write ('#include <libARSAL/ARSAL_Mutex.h>\n')
    cFile.write ('#include <libARCommands/ARCommands.h>\n')
    cFile.write ('#include <libARController/ARCONTROLLER_Network.h>\n')
    cFile.write ('#include <libARController/ARCONTROLLER_Feature.h>\n')
    cFile.write ('\n')
    cFile.write ('#include "ARCONTROLLER_Feature.h"\n')
    cFile.write ('\n')
    cFile.write ('#define '+MODULE_FEATURE+'_TAG "'+classTag+'"\n')
    cFile.write ('\n')
    
    cFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'feature', 'DeleteCommandsDictionary')+' ('+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'COMMANDS')+' **dictionary)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Delete a commands dictionary --\n')
    
    cFile.write ('    \n')
    cFile.write ('    '+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'COMMANDS')+' *dictCmdElement = NULL;\n')
    cFile.write ('    '+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'COMMANDS')+' *dictCmdTmp = NULL;\n')
    cFile.write ('    '+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'ELEMENT')+' *dictElement = NULL;\n')
    cFile.write ('    '+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'ELEMENT')+' *dictTmp = NULL;\n')
    cFile.write ('    \n')

    cFile.write ('    if (dictionary != NULL)\n')
    cFile.write ('    {\n')
    cFile.write ('        if ((*dictionary) != NULL)\n')
    cFile.write ('        {\n')
    cFile.write ('            // Free the hash table contents\n')
    cFile.write ('            HASH_ITER(hh, (*dictionary), dictCmdElement, dictCmdTmp)\n')
    cFile.write ('            {\n')
    
    cFile.write ('                // Free the hash table contents\n')
    cFile.write ('                HASH_ITER(hh, dictCmdElement->elements, dictElement, dictTmp)\n')
    cFile.write ('                {\n')
    cFile.write ('                    // for each element\n')
    cFile.write ('                    \n')
    
    cFile.write ('                    if (dictElement->arguments != NULL)\n')
    cFile.write ('                    {\n')
    cFile.write ('                        // delete all arguments\n')
    cFile.write ('                        ' + ARFunctionName (MODULE_ARCONTROLLER, 'feature', 'DeleteArgumentsDictionary')+' (&(dictElement->arguments));\n')
    cFile.write ('                    }\n')
    cFile.write ('                    \n')
    
    cFile.write ('                    if (dictElement->key != NULL)\n')
    cFile.write ('                    {\n')
    cFile.write ('                        // free the key of the element\n')
    cFile.write ('                        free (dictElement->key);\n')
    cFile.write ('                        dictElement->key = NULL;\n')
    cFile.write ('                    }\n')
    cFile.write ('                    \n')
    
    cFile.write ('                    HASH_DEL (dictCmdElement->elements, dictElement);\n')
    cFile.write ('                    free (dictElement);\n')
    cFile.write ('                    dictElement = NULL;\n')
    cFile.write ('                }\n')
    cFile.write ('                \n')
    
    cFile.write ('                HASH_DEL ((*dictionary), dictCmdElement);\n')
    cFile.write ('                free (dictCmdElement);\n')
    cFile.write ('                dictCmdElement = NULL;\n')
    cFile.write ('            }\n')
    cFile.write ('            \n')

    cFile.write ('            free (*dictionary);\n')
    cFile.write ('            (*dictionary) = NULL;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    
    cFile.write ('}\n')
    cFile.write ('\n')

    cFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'feature', 'DeleteArgumentsDictionary')+' ('+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'ARG')+' **dictionary)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Delete arguments dictionary --\n')
    cFile.write ('    \n')
    cFile.write ('    '+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'ARG')+' *dictElement = NULL;\n')
    cFile.write ('    '+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'ARG')+' *dictTmp = NULL;\n')
    cFile.write ('    \n')

    cFile.write ('    if (dictionary != NULL)\n')
    cFile.write ('    {\n')
    cFile.write ('        if ((*dictionary) != NULL)\n')
    cFile.write ('        {\n')
    cFile.write ('            // Free the hash table contents\n')
    cFile.write ('            HASH_ITER(hh, (*dictionary), dictElement, dictTmp)\n')
    cFile.write ('            {\n')
    cFile.write ('                /* for each element of the arguments dictionary */\n')
    cFile.write ('                if ((dictElement->valueType == '+AREnumValue(MODULE_ARCONTROLLER, 'DICTIONARY', 'VALUE_TYPE', 'string')+') && (dictElement->value.'+ARCapitalize('string')+' != NULL))\n')
    cFile.write ('                {\n')
    cFile.write ('                    free (dictElement->value.'+ARCapitalize('string')+');\n')
    cFile.write ('                    dictElement->value.'+ARCapitalize('string')+' = NULL;\n')
    cFile.write ('                }\n')
    cFile.write ('                \n')
    
    cFile.write ('                HASH_DEL((*dictionary), dictElement);\n')
    cFile.write ('                free(dictElement);\n')
    cFile.write ('                dictElement = NULL;\n')
    cFile.write ('            }\n')
    cFile.write ('            \n')

    cFile.write ('            free (*dictionary);\n')
    cFile.write ('            (*dictionary) = NULL;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    
    cFile.write ('}\n')
    cFile.write ('\n')

    for feature in allFeatures: # see automake all source of folder !!!!!!!!
        
        className = ARTypeName (MODULE_FEATURE, feature.name, '')  # see automake all source of folder !!!!
        classPrivName = ARTypeName (MODULE_FEATURE, feature.name, 'Private')  # see automake all source of folder !!!!
        
        cFile.write ('/*******************************\n') # see automake all source of folder !!!!!!!!
        cFile.write (' * --- FEATURE '+feature.name+' --- \n') # see automake all source of folder !!!!!!!!
        cFile.write (' ******************************/\n') # see automake all source of folder !!!!!!!!
        cFile.write ('\n')
        
        cFile.write ('/*************************\n')
        cFile.write (' * Private header\n')
        cFile.write (' *************************/\n')
        cFile.write ('\n')
        
        cFile.write ('/*************************\n')
        cFile.write (' * Implementation\n')
        cFile.write (' *************************/\n')
        cFile.write ('\n')
        
        for cl in feature.classes:
            if isEvent(cl) or isState(cl):
                for cmd in cl.cmds:
                    for arg in cmd.args:
                        cFile.write ('const char *' + defineNotification(feature, cl, cmd, arg) + ' = "' + defineNotification(feature, cl, cmd, arg).lower() + '";\n')
            cFile.write('\n');
        
        cFile.write (''+className+' *' + ARFunctionName (MODULE_FEATURE, feature.name, 'New')+' (ARCONTROLLER_Network_t *networkController, eARCONTROLLER_ERROR *error)\n')
        cFile.write ('{\n')
        cFile.write ('    // -- Create a new Feature Controller --\n')
        cFile.write ('    \n')
        
        cFile.write ('    //local declarations\n')
        cFile.write ('    eARCONTROLLER_ERROR localError = ARCONTROLLER_OK;\n')
        cFile.write ('   '+className+' *featureController =  NULL;\n')
        cFile.write ('    \n')
        
        cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        cFile.write ('        // Create the Feature Controller\n')
        cFile.write ('        featureController = malloc (sizeof ('+className+'));\n')
        cFile.write ('        if (featureController != NULL)\n')
        cFile.write ('        {\n')

        for cl in feature.classes:
            if not isEvent(cl) and not isState(cl):
                for cmd in cl.cmds:
                    cFile.write ('            featureController->'+sendingFunction(cl, cmd)+' = '+sendingFunctionName (MODULE_FEATURE, feature, cl, cmd)+';\n')
                    if cmd.buf == ARCommandBuffer.NON_ACK:
                        cFile.write ('            featureController->'+setNAckFunction(cl, cmd)+' = '+setNAckFunctionName (feature, cl, cmd)+';\n')
                        for arg in cmd.args:
                            cFile.write ('            featureController->'+setNAckFunction (cl, cmd, arg)+' = '+setNAckFunctionName(feature, cl, cmd, arg)+';\n')
        cFile.write ('            \n')
        cFile.write ('            featureController->privatePart = NULL;\n')
        cFile.write ('        }\n')
        cFile.write ('        else\n')
        cFile.write ('        {\n')
        cFile.write ('            localError = ARCONTROLLER_ERROR_ALLOC;\n')
        cFile.write ('        }\n')
        cFile.write ('    }\n')
        cFile.write ('    // No else: skipped by an error \n')
        cFile.write ('    \n')
        
        cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        cFile.write ('        // Create the Feature Controller private part\n')
        cFile.write ('        featureController->privatePart = malloc (sizeof ('+classPrivName+'));\n')
        cFile.write ('        if (featureController->privatePart != NULL)\n')
        cFile.write ('        {\n')
        cFile.write ('            featureController->privatePart->networkController = networkController;\n')
        cFile.write ('            featureController->privatePart->dictionary = NULL;\n')
        cFile.write ('            featureController->privatePart->commandCallbacks = NULL;\n')
        for cl in feature.classes:
            for cmd in cl.cmds :
                if cmd.buf == ARCommandBuffer.NON_ACK:
                    cFile.write ('            featureController->privatePart->'+structNAckName (cl, cmd)+' = NULL;\n')
                    
        cFile.write ('            // Create the mutex \n')
        cFile.write ('            if (ARSAL_Mutex_Init (&(featureController->privatePart->mutex)) != 0)\n')
        cFile.write ('            {\n')
        cFile.write ('                localError = ARCONTROLLER_ERROR_INIT_MUTEX;\n')
        cFile.write ('            }\n')
        cFile.write ('        }\n')
        cFile.write ('        else\n')
        cFile.write ('        {\n')
        cFile.write ('            localError = ARCONTROLLER_ERROR_ALLOC;\n')
        cFile.write ('        }\n')
        cFile.write ('    }\n')
        cFile.write ('    // No else: skipped by an error \n')
        cFile.write ('    \n')
        
        for cl in feature.classes:
            for cmd in cl.cmds :
                if cmd.buf == ARCommandBuffer.NON_ACK:
                    cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
                    cFile.write ('    {\n')
                    cFile.write ('        featureController->privatePart->'+structNAckName (cl, cmd)+' = calloc (1, sizeof ('+structNAckType (feature, cl, cmd)+'));\n')
                    cFile.write ('        if (featureController->privatePart == NULL)\n')
                    cFile.write ('        {\n')
                    cFile.write ('            localError = ARCONTROLLER_ERROR_ALLOC;\n')
                    cFile.write ('        }\n')
                    cFile.write ('    }\n')
                    cFile.write ('    // No else: skipped by an error \n')
                    cFile.write ('    \n')
                    
        
        cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        cFile.write ('        localError = '+ARFunctionName (MODULE_FEATURE, feature.name, 'RegisterARCommands')+' (featureController);\n')
        cFile.write ('    }\n')
        cFile.write ('    // No else: skipped by an error \n')
        cFile.write ('    \n')
        
        cFile.write ('    // delete the feature Controller if an error occurred\n')
        cFile.write ('    if (localError != ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        cFile.write ('        ' + ARFunctionName (MODULE_FEATURE, feature.name, 'Delete')+' (&featureController);\n')
        cFile.write ('    }\n')
        cFile.write ('    // No else: skipped no error \n')
        cFile.write ('    \n')
        
        cFile.write ('    // Return the error\n')
        cFile.write ('    if (error != NULL)\n')
        cFile.write ('    {\n')
        cFile.write ('        *error = localError;\n')
        cFile.write ('    }\n')
        cFile.write ('    // No else: error is not returned \n')
        cFile.write ('    \n')
        
        cFile.write ('    return featureController;\n')
        cFile.write ('}\n')
        cFile.write ('\n')
        
        cFile.write ('void ' + ARFunctionName (MODULE_FEATURE, feature.name, 'Delete')+' ('+className+' **feature)\n')
        cFile.write ('{\n')
        
        cFile.write ('    // -- Delete the '+feature.name+' feature Controller --\n')
        cFile.write ('    \n')
        
        cFile.write ('    if (feature != NULL)\n')
        cFile.write ('    {\n')
        cFile.write ('        if ((*feature) != NULL)\n')
        cFile.write ('        {\n')
        
        cFile.write ('            '+ARFunctionName (MODULE_FEATURE, feature.name, 'UnregisterARCommands')+' ((*feature));\n')
        cFile.write ('            \n')
        
        cFile.write ('            if ((*feature)->privatePart != NULL)\n')
        cFile.write ('            {\n')
        cFile.write ('                ARSAL_Mutex_Destroy (&((*feature)->privatePart->mutex));\n')
        cFile.write ('                \n')
        
        cFile.write ('                if ((*feature)->privatePart->dictionary != NULL)\n')
        cFile.write ('                {\n')
        cFile.write ('                    ' + ARFunctionName (MODULE_ARCONTROLLER, 'feature', 'DeleteCommandsDictionary')+' (&((*feature)->privatePart->dictionary));\n')
        cFile.write ('                }\n')
        cFile.write ('                \n')
        
        cFile.write ('                if ((*feature)->privatePart->commandCallbacks != NULL)\n')
        cFile.write ('                {\n')
        cFile.write ('                    // Free the hash table contents the command callback\n')
        cFile.write ('                    ARCONTROLLER_Dictionary_DeleteDictionary (&((*feature)->privatePart->commandCallbacks));\n')
        cFile.write ('                }\n')
        cFile.write ('                \n')
        
        for cl in feature.classes:
            for cmd in cl.cmds :
                if cmd.buf == ARCommandBuffer.NON_ACK:
                    cFile.write ('                if ((*feature)->privatePart->'+structNAckName (cl, cmd)+' != NULL)\n')
                    cFile.write ('                {\n')
                    cFile.write ('                    free ((*feature)->privatePart->'+structNAckName (cl, cmd)+');\n')
                    cFile.write ('                    (*feature)->privatePart->'+structNAckName (cl, cmd)+' = NULL;\n')
                    cFile.write ('                }\n')
        
        cFile.write ('                free ((*feature)->privatePart);\n')
        cFile.write ('                (*feature)->privatePart = NULL;\n')
        cFile.write ('            }\n')
        cFile.write ('            \n')
        
        cFile.write ('            free (*feature);\n')
        cFile.write ('            (*feature) = NULL;\n')
        cFile.write ('        }\n')
        cFile.write ('    }\n')
        cFile.write ('}\n')
        cFile.write ('\n')
        
        cFile.write (''+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'COMMANDS')+' *' + ARFunctionName (MODULE_FEATURE, feature.name, 'GetDictionary')+' ('+className+' *feature, eARCONTROLLER_ERROR *error)\n')
        cFile.write ('{\n')
        cFile.write ('    // -- Get the dictionary of the '+feature.name+' Feature Controller --\n')
        cFile.write ('    \n')
        cFile.write ('    eARCONTROLLER_ERROR localError = ARCONTROLLER_OK;\n')
        cFile.write ('    '+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'COMMANDS')+' *dictionary = NULL;\n')
        cFile.write ('    \n')
        
        cFile.write ('    // Check parameters\n')
        cFile.write ('    if ((feature == NULL) || (feature->privatePart == NULL))\n')
        cFile.write ('    {\n')
        cFile.write ('        localError = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
        cFile.write ('    }\n')
        cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
        cFile.write ('    \n')
        
        cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        cFile.write ('        dictionary = feature->privatePart->dictionary;\n')
        cFile.write ('    }\n')
        cFile.write ('    \n')
        
        cFile.write ('    // Return the error\n')
        cFile.write ('    if (error != NULL)\n')
        cFile.write ('    {\n')
        cFile.write ('        *error = localError;\n')
        cFile.write ('    }\n')
        cFile.write ('    // No else: error is not returned \n')
        cFile.write ('    \n')
        
        cFile.write ('    return dictionary;\n')
        cFile.write ('}\n')
        cFile.write ('\n')
        
        cFile.write ('eARCONTROLLER_ERROR '+ARFunctionName(MODULE_FEATURE, feature.name, 'AddCallback')+' ('+className+' *feature, '+defineNotificationDef()+' commandKey, '+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'CALLBACK')+' callback, void *customData)\n')
        cFile.write ('{\n')
        
        cFile.write ('    // -- Add a callback to use when a command in project <code>' + ARCapitalize (feature.name) + '</code> is received --\n')
        cFile.write ('    \n')
        
        cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
        cFile.write ('    \n')
        
        cFile.write ('    // Check parameters\n')
        cFile.write ('    if ((feature == NULL) || (feature->privatePart == NULL))\n')
        cFile.write ('    {\n')
        cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
        cFile.write ('    }\n')
        cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
        cFile.write ('    \n')
        
        cFile.write ('    if (error == ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        cFile.write ('        error = ARCONTROLLER_Dictionary_AddDictionaryElement (&(feature->privatePart->commandCallbacks), commandKey, callback, customData);\n')
        cFile.write ('    }\n')
        cFile.write ('    \n')
        
        cFile.write ('    return error;\n')
        cFile.write ('}\n')
        cFile.write ('\n')
        
        cFile.write ('eARCONTROLLER_ERROR '+ARFunctionName(MODULE_FEATURE, feature.name, 'RemoveCallback')+' ('+className+' *feature, '+defineNotificationDef()+' commandKey, '+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'CALLBACK')+' callback, void *customData)\n')
        cFile.write ('{\n')
        cFile.write ('    // -- Remove a callback to use when a command in project <code>' + ARCapitalize (feature.name) + '</code> is received --\n')
        cFile.write ('    \n')
        
        cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
        cFile.write ('    \n')
        
        cFile.write ('    // Check parameters\n')
        cFile.write ('    if ((feature == NULL) || (feature->privatePart == NULL))\n')
        cFile.write ('    {\n')
        cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
        cFile.write ('    }\n')
        cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
        cFile.write ('    \n')
        
        cFile.write ('    if (error == ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        
        cFile.write ('        error = ARCONTROLLER_Dictionary_RemoveDictionaryElement (feature->privatePart->commandCallbacks, commandKey, callback, customData);\n')
        
        cFile.write ('    }\n')
        cFile.write ('    \n')
        
        cFile.write ('    return error;\n')
        cFile.write ('}\n')
        cFile.write ('\n')
        
        cFile.write ('eARCONTROLLER_ERROR '+ARFunctionName (MODULE_FEATURE, feature.name, 'RegisterARCommands')+' ('+className+' *feature)\n')
        cFile.write ('{\n')
        cFile.write ('    // -- Register the feature controller to be called when the commands are decoded. -- \n')
        cFile.write ('    \n')
        
        cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
        cFile.write ('    \n')
        
        cFile.write ('    // Check parameters\n')
        cFile.write ('    if ((feature == NULL) || (feature->privatePart == NULL))\n')
        cFile.write ('    {\n')
        cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
        cFile.write ('    }\n')
        cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
        cFile.write ('    \n')
        
        cFile.write ('    if (error == ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        for cl in feature.classes:
            if isEvent(cl) or isState(cl):
                cFile.write ('        // Commands of class : '+cl.name+':\n')
                for cmd in cl.cmds:
                    cFile.write ('        '+arcommandsSetDecode(feature, cl, cmd)+' (&'+decodeCallback(feature, cl, cmd)+', feature);\n')
        cFile.write ('    }\n')
        cFile.write ('    \n')
        cFile.write ('    return error;\n')
        cFile.write ('}\n')
        cFile.write ('\n')
        
        cFile.write ('eARCONTROLLER_ERROR '+ARFunctionName (MODULE_FEATURE, feature.name, 'UnregisterARCommands')+' ('+className+' *feature)\n')
        cFile.write ('{\n')
        cFile.write ('    // -- Unregister the feature controller to be called when the commands are decoded. -- \n')
        cFile.write ('    \n')
        
        cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
        cFile.write ('    \n')
        
        cFile.write ('    // Check parameters\n')
        cFile.write ('    if ((feature == NULL) || (feature->privatePart == NULL))\n')
        cFile.write ('    {\n')
        cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
        cFile.write ('    }\n')
        cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
        cFile.write ('    \n')
        
        cFile.write ('    if (error == ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        for cl in feature.classes:
            if isEvent(cl) or isState(cl):
                cFile.write ('        // Commands of class : '+cl.name+':\n')
                for cmd in cl.cmds:
                    cFile.write ('        '+arcommandsSetDecode(feature, cl, cmd)+' (NULL, NULL);\n')
        cFile.write ('    }\n')
        cFile.write ('    \n')
        cFile.write ('    return error;\n')
        cFile.write ('}\n')
        cFile.write ('\n')
        
        for cl in feature.classes:
            cFile.write ('/**\n')
            cFile.write (' * class: '+cl.name+' \n')
            for comment in cl.comments:
                cFile.write (' * ' + comment+'\n')
            cFile.write (' */\n')
            cFile.write ('\n')
            if not isEvent(cl) and not isState(cl):
                for cmd in cl.cmds:
                    cFile.write ('eARCONTROLLER_ERROR ' + sendingFunctionName (MODULE_FEATURE, feature, cl, cmd)+' ('+className+' *feature')
                    for arg in cmd.args:
                        cFile.write (', ' + xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' ' + arg.name)
                    cFile.write (')\n')
                    cFile.write ('{\n')
                    cFile.write ('    // -- Send a command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code> --\n')
                    cFile.write ('    \n')
                    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
                    cFile.write ('    u_int8_t cmdBuffer[128];\n')
                    cFile.write ('    int32_t cmdSize = 0;\n')
                    cFile.write ('    eARCOMMANDS_GENERATOR_ERROR cmdError = ARCOMMANDS_GENERATOR_OK;\n')
                    cFile.write ('    eARNETWORK_ERROR netError = ARNETWORK_OK;\n')
                    cFile.write ('    \n')
                    
                    cFile.write ('    // Check parameters\n')
                    cFile.write ('    if (feature == NULL)\n')
                    cFile.write ('    {\n')
                    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
                    cFile.write ('    }\n')
                    cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
                    cFile.write ('    \n')
                    
                    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
                    cFile.write ('    {\n')
                    cFile.write ('        // Send ' + ARCapitalize(cmd.name) + ' command\n')
                    cFile.write ('        cmdError = ARCOMMANDS_Generator_Generate' + ARCapitalize(feature.name) + ARCapitalize(cl.name) + ARCapitalize(cmd.name) + '(cmdBuffer, sizeof(cmdBuffer), &cmdSize')
                    for arg in cmd.args:
                        cFile.write (', ' + arg.name)
                    cFile.write(');\n')
                    cFile.write ('        if (cmdError != ARCOMMANDS_GENERATOR_OK)\n')
                    cFile.write ('        {\n')
                    cFile.write ('            error = ARCONTROLLER_ERROR_COMMAND_GENERATING;\n')
                    cFile.write ('        }\n')
                    cFile.write ('    }\n')
                    cFile.write ('    \n')
                    
                    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
                    cFile.write ('    {\n')
                    
                    bufferType = 'ARCONTROLLER_NETWORK_SENDING_DATA_TYPE_ACK'
                    if cmd.buf == ARCommandBuffer.NON_ACK:
                        bufferType = 'ARCONTROLLER_NETWORK_SENDING_DATA_TYPE_NOT_ACK'
                    elif cmd.buf == ARCommandBuffer.ACK:
                        bufferType = 'ARCONTROLLER_NETWORK_SENDING_DATA_TYPE_ACK'
                    elif cmd.buf == ARCommandBuffer.HIGH_PRIO:
                        bufferType = 'ARCONTROLLER_NETWORK_SENDING_DATA_TYPE_HIGH_PRIORITY'
                        
                    timeoutPolicy = 'ARNETWORK_MANAGER_CALLBACK_RETURN_DATA_POP'
                    if cmd.timeout == ARCommandTimeoutPolicy.POP:
                        timeoutPolicy = 'ARNETWORK_MANAGER_CALLBACK_RETURN_DATA_POP'
                    elif cmd.timeout == ARCommandTimeoutPolicy.RETRY:
                        timeoutPolicy = 'ARNETWORK_MANAGER_CALLBACK_RETURN_RETRY'
                    elif cmd.timeout == ARCommandTimeoutPolicy.FLUSH:
                        timeoutPolicy = 'ARNETWORK_MANAGER_CALLBACK_RETURN_FLUSH'

                    cFile.write ('        error = ARCONTROLLER_Network_SendData (feature->privatePart->networkController, cmdBuffer, cmdSize, '+bufferType+', '+timeoutPolicy+', &netError);\n')
                    
                    ''' TODO manage error !!!!!!!!!!!!
                    cFile.write ('        \n')
                    cFile.write ('        if ((error != ARCONTROLLER_OK) || (netError != ARNETWORK_OK))\n')
                    cFile.write ('        {\n')
                    cFile.write ('            \n')
                    cFile.write ('        }\n')
                    '''

                    cFile.write ('    }\n')
                    cFile.write ('    \n')
                    
                    cFile.write ('    return error;\n')
                    cFile.write ('}\n')
                    cFile.write ('\n')
                    
                    if cmd.buf == ARCommandBuffer.NON_ACK:
                        cFile.write ('eARCONTROLLER_ERROR ' + setNAckFunctionName (feature, cl, cmd)+' ('+className+' *feature')
                        for arg in cmd.args:
                            cFile.write (', ' + xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' _' + arg.name)
                        cFile.write (')\n')
                        cFile.write ('{\n')
                        
                        cFile.write ('    // -- Set the parameter for the command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code> --\n')
                        cFile.write ('    \n')
                        cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
                        cFile.write ('    \n')
                        
                        cFile.write ('    // Check parameters\n')
                        cFile.write ('    if ((feature == NULL) ||\n')
                        cFile.write ('       (feature->privatePart == NULL) ||\n')
                        cFile.write ('       (feature->privatePart->'+structNAckName (cl, cmd)+' == NULL))\n')
                        cFile.write ('    {\n')
                        cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
                        cFile.write ('    }\n')
                        cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
                        cFile.write ('    \n')
                        
                        cFile.write ('    if (error == ARCONTROLLER_OK)\n')
                        cFile.write ('    {\n')
                        for arg in cmd.args:
                            cFile.write ('        feature->privatePart->'+structNAckName(cl, cmd)+'->' + arg.name + ' = _'+arg.name+';\n')
                        cFile.write ('    }\n')
                        cFile.write ('    \n')
                        
                        cFile.write ('    return error;\n')
                        cFile.write ('}\n')
                        cFile.write ('\n')
                        
                        cFile.write ('eARCONTROLLER_ERROR '+ sendNAckFunctionName (feature, cl, cmd)+' ('+className+' *feature, u_int8_t *cmdBuffer, int32_t cmdBufferSize)\n')
                        cFile.write ('{\n')
                        cFile.write ('    // -- Send the a command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code> with the parame set beforehand  --\n')
                        cFile.write ('    \n')
                        cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
                        cFile.write ('    eARCOMMANDS_GENERATOR_ERROR cmdError = ARCOMMANDS_GENERATOR_OK;\n')
                        cFile.write ('    eARNETWORK_ERROR netError = ARNETWORK_OK;\n')
                        cFile.write ('    int32_t cmdSize = 0;\n')
                        cFile.write ('    \n')
                        
                        cFile.write ('    // Check parameters\n')
                        cFile.write ('    if ((feature == NULL) ||\n')
                        cFile.write ('       (feature->privatePart == NULL) ||\n')
                        cFile.write ('       (feature->privatePart->'+structNAckName (cl, cmd)+' == NULL) ||\n')
                        cFile.write ('       (cmdBuffer == NULL))\n')
                        cFile.write ('    {\n')
                        cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
                        cFile.write ('    }\n')
                        cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
                        cFile.write ('    \n')
                        
                        cFile.write ('    if (error == ARCONTROLLER_OK)\n')
                        cFile.write ('    {\n')
                        
                        cFile.write ('        // Send ' + ARCapitalize(cmd.name) + ' command\n')
                        cFile.write ('        cmdError = ARCOMMANDS_Generator_Generate' + ARCapitalize(feature.name) + ARCapitalize(cl.name) + ARCapitalize(cmd.name) + '(cmdBuffer, cmdBufferSize, &cmdSize')
                        for arg in cmd.args:
                                cFile.write (', feature->privatePart->'+structNAckName (cl, cmd)+'->' + arg.name)
                        cFile.write(');\n')
                        cFile.write ('        if (cmdError != ARCOMMANDS_GENERATOR_OK)\n')
                        cFile.write ('        {\n')
                        cFile.write ('            error = ARCONTROLLER_ERROR_COMMAND_GENERATING;\n')
                        cFile.write ('        }\n')
                        cFile.write ('    }\n')
                        cFile.write ('    \n')
                        
                        cFile.write ('    if (error == ARCONTROLLER_OK)\n')
                        cFile.write ('    {\n')
                        cFile.write ('        error = ARCONTROLLER_Network_SendData (feature->privatePart->networkController, cmdBuffer, cmdSize, ARCONTROLLER_NETWORK_SENDING_DATA_TYPE_NOT_ACK, ARNETWORK_MANAGER_CALLBACK_RETURN_DATA_POP, &netError);\n')
                        cFile.write ('        if (netError != ARNETWORK_OK)\n')
                        cFile.write ('        {\n')
                        cFile.write ('            ARSAL_PRINT(ARSAL_PRINT_ERROR, ARCONTROLLER_FEATURE_TAG, "Network sending error : %s", ARNETWORK_Error_ToString (netError));\n')
                        cFile.write ('        }\n')
                        cFile.write ('        \n')
                        
                        cFile.write ('    }\n')
                        cFile.write ('    \n')
                        
                        cFile.write ('    return error;\n')
                        cFile.write ('}\n')
                        cFile.write ('\n')
                        
                        for arg in cmd.args:
                            cFile.write ('eARCONTROLLER_ERROR ' + setNAckFunctionName (feature, cl, cmd, arg)+' ('+className+' *feature, ' + xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' _'+ arg.name +')\n')
                            cFile.write ('{\n')
                            
                            cFile.write ('    // -- Set the '+arg.name+' for the command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + '</code> in project <code>' + ARCapitalize (feature.name) + '</code> --\n')
                            cFile.write ('    \n')
                            cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
                            cFile.write ('    \n')
                            
                            cFile.write ('    // Check parameters\n')
                            cFile.write ('    if ((feature == NULL) ||\n')
                            cFile.write ('       (feature->privatePart == NULL) ||\n')
                            cFile.write ('       (feature->privatePart->'+structNAckName (cl, cmd)+' == NULL))\n')
                            cFile.write ('    {\n')
                            cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
                            cFile.write ('    }\n')
                            cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
                            cFile.write ('    \n')
                            
                            cFile.write ('    if (error == ARCONTROLLER_OK)\n')
                            cFile.write ('    {\n')
                            cFile.write ('        feature->privatePart->'+structNAckName(cl, cmd)+'->' + arg.name + ' = _'+arg.name+';\n')
                            cFile.write ('    }\n')
                            cFile.write ('    \n')
                            
                            cFile.write ('    return error;\n')
                            cFile.write ('}\n')
                            cFile.write ('\n')
                    
            if isEvent(cl) or isState(cl):
                for cmd in cl.cmds:
                    cFile.write ('void '+decodeCallback (feature, cl, cmd)+' (')
                    for arg in cmd.args:
                        cFile.write (xmlToC (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' _' + arg.name + ', ')
                    cFile.write ('void *customData)\n')
                    cFile.write ('{\n')
                    cFile.write ('    // -- callback used when the command <code>' + ARCapitalize (cmd.name) + '</code> of class <code>' + ARCapitalize (cl.name) + ' is decoded -- \n')
                    cFile.write ('    \n')
                    cFile.write ('    '+className+' *feature = ('+className+' *)customData;\n')
                    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
                    cFile.write ('    int commandKey = '+defineNotification(feature, cl, cmd)+';\n')
                    cFile.write ('    int elementAdded = 0;\n')
                    cFile.write ('    int isANewCommandElement = 0;\n')
                    cFile.write ('    '+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'COMMANDS')+' *dictCmdElement = NULL;\n')
                    cFile.write ('    '+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'ELEMENT')+' *newElement = NULL;\n')
                    cFile.write ('    '+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'ELEMENT')+' *oldElement = NULL;\n')
                    cFile.write ('    int elementKeyLength = 0;\n')
                    if cmd.args:
                        cFile.write ('    '+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'ARG')+' *argDictNewElement = NULL;\n')
                    if [ a for a in cmd.args if a.type == 'string' ]:
                        cFile.write ('    int strLength = 0;\n')
                    cFile.write ('    \n')
                    
                    cFile.write ('    // Check parameters\n')
                    cFile.write ('    if ((feature == NULL) || (feature->privatePart == NULL))\n')
                    cFile.write ('    {\n')
                    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
                    cFile.write ('    }\n')
                    cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
                    cFile.write ('    \n')
                    
                    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
                    cFile.write ('    {\n')
                    cFile.write ('        ARSAL_Mutex_Lock (&(feature->privatePart->mutex));\n')
                    cFile.write ('        \n')
                    cFile.write ('        // Find command elements\n')
                    cFile.write ('        HASH_FIND_INT (feature->privatePart->dictionary, &commandKey, dictCmdElement);\n')
                    cFile.write ('        if (dictCmdElement == NULL)\n')
                    cFile.write ('        {\n')
                    cFile.write ('            // New command element\n')
                    cFile.write ('            isANewCommandElement = 1;\n')
                    cFile.write ('            dictCmdElement = malloc (sizeof('+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'COMMANDS')+'));\n')
                    cFile.write ('            if (dictCmdElement != NULL)\n')
                    cFile.write ('            {\n')
                    cFile.write ('                dictCmdElement->command = commandKey;\n')
                    cFile.write ('                dictCmdElement->elements = NULL;\n')
                    cFile.write ('            }\n')
                    cFile.write ('            else\n')
                    cFile.write ('            {\n')
                    cFile.write ('                error = ARCONTROLLER_ERROR_ALLOC;\n')
                    cFile.write ('            }\n')
                    cFile.write ('        }\n')
                    cFile.write ('        // No Else ; commandElement already exists.\n')
                    cFile.write ('        \n')
                    cFile.write ('        ARSAL_Mutex_Unlock (&(feature->privatePart->mutex));\n')
                    cFile.write ('    }\n')
                    cFile.write ('    \n')
                    
                    cFile.write ('    //Create Element Dictionary\n')
                    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
                    cFile.write ('    {\n')
                    cFile.write ('        // New element\n')
                    cFile.write ('        newElement = malloc (sizeof('+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'ELEMENT')+'));\n')
                    cFile.write ('        if (newElement != NULL)\n')
                    cFile.write ('        {\n')
                    cFile.write ('            newElement->key = NULL;\n')
                    cFile.write ('            newElement->arguments = NULL;\n')
                    cFile.write ('        }\n')
                    cFile.write ('        else\n')
                    cFile.write ('        {\n')
                    cFile.write ('            error = ARCONTROLLER_ERROR_ALLOC;\n')
                    cFile.write ('        }\n')
                    cFile.write ('    }\n')
                    cFile.write ('    \n')
                    
                    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
                    cFile.write ('    {\n')
                    if cmd.listtype == ARCommandListType.LIST:
                        cFile.write ('        ARSAL_Mutex_Lock (&(feature->privatePart->mutex));\n')
                        cFile.write ('        \n')
                        
                    cFile.write ('        //Alloc Element Key\n')
                    if cmd.listtype == ARCommandListType.MAP:
                        if cmd.args[0].type == 'string':
                            cFile.write ('        elementKeyLength = strlen (_'+cmd.args[0].name+');\n')
                        else:
                            cFile.write ('        elementKeyLength = snprintf (NULL, 0, '+xmlToFormat(cmd.args[0])+', _'+cmd.args[0].name+');\n')
                    elif cmd.listtype == ARCommandListType.LIST:
                        cFile.write ('        elementKeyLength = snprintf (NULL, 0, "%d", HASH_COUNT (dictCmdElement->elements));\n')
                    elif cmd.listtype == ARCommandListType.NONE:
                        cFile.write ('        elementKeyLength = strlen (ARCONTROLLER_DICTIONARY_SINGLE_KEY);\n')
                    
                    cFile.write ('        newElement->key = malloc (elementKeyLength + 1);\n')
                    cFile.write ('        if (newElement->key != NULL)\n')
                    cFile.write ('        {\n')
                    if cmd.listtype == ARCommandListType.MAP:
                        if cmd.args[0].type == 'string':
                            cFile.write ('            strncpy (newElement->key, _'+cmd.args[0].name+', (elementKeyLength + 1));\n')
                        else:
                            cFile.write ('            snprintf (newElement->key, (elementKeyLength + 1), '+xmlToFormat(cmd.args[0])+', _'+cmd.args[0].name+');\n')
                    
                    elif cmd.listtype == ARCommandListType.LIST:
                        cFile.write ('            snprintf (newElement->key, (elementKeyLength + 1), "%d", HASH_COUNT (dictCmdElement->elements));\n')
                    elif cmd.listtype == ARCommandListType.NONE:
                        cFile.write ('            strncpy (newElement->key, ARCONTROLLER_DICTIONARY_SINGLE_KEY, (elementKeyLength + 1));\n')
                    
                    cFile.write ('            newElement->key[elementKeyLength] = \'\\0\';\n')
                    cFile.write ('        }\n')
                    cFile.write ('        else\n')
                    cFile.write ('        {\n')
                    cFile.write ('            error = ARCONTROLLER_ERROR_ALLOC;\n')
                    cFile.write ('        }\n')
                    if cmd.listtype == ARCommandListType.LIST:
                        cFile.write ('        \n')
                        cFile.write ('        ARSAL_Mutex_Unlock (&(feature->privatePart->mutex));\n')
                    cFile.write ('    }\n')
                    cFile.write ('    \n')
                    
                    cFile.write ('    //Create argument Dictionary\n')
                    for arg in cmd.args:
                        cFile.write ('    //Add argument To the element\n')
                        cFile.write ('    if (error == ARCONTROLLER_OK)\n')
                        cFile.write ('    {\n')
                        cFile.write ('        // New argument element\n')
                        cFile.write ('        argDictNewElement = malloc (sizeof('+ARTypeName(MODULE_ARCONTROLLER, 'DICTIONARY', 'ARG')+'));\n')
                        cFile.write ('        if (argDictNewElement != NULL)\n')
                        cFile.write ('        {\n')
                        cFile.write ('            argDictNewElement->valueType = '+AREnumValue(MODULE_ARCONTROLLER, 'DICTIONARY', 'VALUE_TYPE', arg.type)+';\n')
                        cFile.write ('            argDictNewElement->argument = '+defineNotification(feature, cl, cmd, arg)+';\n')
                        
                        if arg.type == 'string':
                            cFile.write ('            strLength = strlen (_'+arg.name+');\n')
                            cFile.write ('            argDictNewElement->value.'+ARCapitalize(arg.type)+' = malloc (strLength + 1);\n')
                            cFile.write ('            if (argDictNewElement->value.'+ARCapitalize(arg.type)+' != NULL)\n')
                            cFile.write ('            {\n')
                            cFile.write ('                strncpy (argDictNewElement->value.'+ARCapitalize(arg.type)+', _'+arg.name+', strLength);\n')
                            cFile.write ('                argDictNewElement->value.'+ARCapitalize(arg.type)+'[strLength] = \'\\0\';\n')
                            cFile.write ('            }\n')
                            cFile.write ('            else\n')
                            cFile.write ('            {\n')
                            cFile.write ('                error = ARCONTROLLER_ERROR_ALLOC;\n')
                            cFile.write ('            }\n')
                        elif arg.type == 'enum':
                            cFile.write ('            argDictNewElement->value.'+ARCapitalize('i32')+' = _'+arg.name+';\n')
                        else:
                            cFile.write ('            argDictNewElement->value.'+ARCapitalize(arg.type)+' = _'+arg.name+';\n')
                        cFile.write ('            \n')
                        
                        if arg.type == 'string':
                            cFile.write ('            if (error == ARCONTROLLER_OK)\n')
                            cFile.write ('            {\n')
                            cFile.write ('                HASH_ADD_KEYPTR (hh, newElement->arguments, argDictNewElement->argument, strlen(argDictNewElement->argument), argDictNewElement);\n')
                            cFile.write ('            }\n')
                        else:
                            cFile.write ('            HASH_ADD_KEYPTR (hh, newElement->arguments, argDictNewElement->argument, strlen(argDictNewElement->argument), argDictNewElement);\n')
                        cFile.write ('        }\n')
                        cFile.write ('        else\n')
                        cFile.write ('        {\n')
                        cFile.write ('            error = ARCONTROLLER_ERROR_ALLOC;\n')
                        cFile.write ('        }\n')
                        cFile.write ('    }\n')
                        cFile.write ('    \n')

                    cFile.write ('    //Set new element in CommandElements \n')
                    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
                    cFile.write ('    {\n')
                    cFile.write ('        ARSAL_Mutex_Lock (&(feature->privatePart->mutex));\n')
                    cFile.write ('        \n')
                    cFile.write ('        // Find if the element already exist\n')
                    cFile.write ('        HASH_FIND_STR (dictCmdElement->elements, newElement->key, oldElement);\n')
                    cFile.write ('        if (oldElement != NULL)\n')
                    cFile.write ('        {\n')
                    cFile.write ('            HASH_REPLACE_STR (dictCmdElement->elements, key, newElement, oldElement);\n')
                    cFile.write ('            \n')
                    
                    cFile.write ('            ' + ARFunctionName (MODULE_ARCONTROLLER, 'feature', 'DeleteArgumentsDictionary')+' (&(oldElement->arguments));\n')
                    cFile.write ('            free (oldElement);\n')
                    cFile.write ('            oldElement = NULL;\n')
                    cFile.write ('        }\n')
                    cFile.write ('        else\n')
                    cFile.write ('        {\n')
                    cFile.write ('            HASH_ADD_KEYPTR (hh, dictCmdElement->elements, newElement->key, strlen(newElement->key), newElement);\n')
                    cFile.write ('        }\n')
                    cFile.write ('        \n')
                    
                    cFile.write ('        //Add new commandElement if necessary\n')
                    cFile.write ('        if (isANewCommandElement)\n')
                    cFile.write ('        {\n')
                    cFile.write ('            HASH_ADD_INT (feature->privatePart->dictionary, command, dictCmdElement);\n')
                    cFile.write ('        }\n')
                    cFile.write ('        \n')
                    cFile.write ('        elementAdded = 1;\n')
                    cFile.write ('        \n')
                    cFile.write ('        ARSAL_Mutex_Unlock (&(feature->privatePart->mutex));\n')
                    cFile.write ('    }\n')
                    cFile.write ('    \n')
                    
                    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
                    cFile.write ('    {\n')
                    cFile.write ('        // Callback notification\n')
                    cFile.write ('        error = ARCONTROLLER_Dictionary_Notify (feature->privatePart->commandCallbacks, dictCmdElement->command, dictCmdElement->elements);\n')
                    cFile.write ('    }\n')
                    cFile.write ('    \n')
                    
                    cFile.write ('    // if an error occurred \n')
                    cFile.write ('    if (error != ARCONTROLLER_OK)\n')
                    cFile.write ('    {\n')
                    cFile.write ('        // cleanup\n')
                    cFile.write ('        if ((dictCmdElement != NULL) && (!elementAdded ))\n')
                    cFile.write ('        {\n')
                    cFile.write ('            if (newElement != NULL)\n')
                    cFile.write ('            {\n')
                    cFile.write ('                if (newElement->arguments != NULL)\n')
                    cFile.write ('                {\n')
                    
                    for arg in cmd.args:
                        if arg.type == 'string':
                            cFile.write ('                    if (newElement->arguments->value.'+ARCapitalize(arg.type)+' != NULL)\n')
                            cFile.write ('                    {\n')
                            cFile.write ('                        free(newElement->arguments->value.'+ARCapitalize(arg.type)+');\n')
                            cFile.write ('                        newElement->arguments->value.'+ARCapitalize(arg.type)+' = NULL;\n')
                            cFile.write ('                    }\n')
                            cFile.write ('                    \n')
                    
                    cFile.write ('                    free (newElement->arguments);\n')
                    cFile.write ('                    newElement->arguments = NULL;\n')
                    cFile.write ('                }\n')
                    cFile.write ('                \n')
                    
                    cFile.write ('                if (newElement->key != NULL)\n')
                    cFile.write ('                {\n')
                    cFile.write ('                    free (newElement->key);\n')
                    cFile.write ('                    newElement->key = NULL;\n')
                    cFile.write ('                }\n')
                    cFile.write ('                \n')
                    
                    cFile.write ('                free (newElement);\n')
                    cFile.write ('                newElement = NULL;\n')
                    cFile.write ('            }\n')
                    
                    cFile.write ('            if (isANewCommandElement)\n')
                    cFile.write ('            {\n')
                    cFile.write ('                free (dictCmdElement);\n')
                    cFile.write ('                dictCmdElement = NULL;\n')
                    cFile.write ('            }\n')
                    cFile.write ('        }\n')
                    cFile.write ('    }\n')
                    cFile.write ('}\n')
                    cFile.write ('\n')
                    
        cFile.write ('eARCONTROLLER_ERROR '+ARFunctionName(MODULE_FEATURE, feature.name, 'SetNetworkController')+' ('+className+' *feature, ARCONTROLLER_Network_t *networkController)\n')
        cFile.write ('{\n')
        cFile.write ('    // -- Set a NetworkController to use to send commands. --\n')
        cFile.write ('    \n')
        
        cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
        cFile.write ('    \n')
        
        cFile.write ('    // Check parameters\n')
        cFile.write ('    if ((feature == NULL) || (feature->privatePart == NULL))\n')
        cFile.write ('    {\n')
        cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
        cFile.write ('    }\n')
        cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
        cFile.write ('    \n')
        
        cFile.write ('    if (error == ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        cFile.write ('        feature->privatePart->networkController = networkController;\n')
        cFile.write ('    }\n')
        cFile.write ('    \n')
        
        cFile.write ('    return error;\n')
        cFile.write ('}\n')
        cFile.write ('\n')
        
        cFile.write ('ARCONTROLLER_DICTIONARY_ELEMENT_t *' + ARFunctionName (MODULE_ARCONTROLLER, feature.name, 'GetCommandElements')+' ('+className+' *feature, '+defineNotificationDef()+' commandKey, eARCONTROLLER_ERROR *error)\n')
        cFile.write ('{\n')
        cFile.write ('    // -- Get Command Arguments --\n')
        cFile.write ('    \n')
        
        cFile.write ('    eARCONTROLLER_ERROR localError = ARCONTROLLER_OK;\n')
        cFile.write ('    ARCONTROLLER_DICTIONARY_COMMANDS_t *commandDic = NULL;\n')
        cFile.write ('    ARCONTROLLER_DICTIONARY_ELEMENT_t *elements = NULL;\n')
        cFile.write ('    \n')
        
        cFile.write ('    // Check parameters\n')
        cFile.write ('    if ((feature == NULL) ||\n')
        cFile.write ('        (feature->privatePart == NULL))\n')
        cFile.write ('    {\n')
        cFile.write ('        localError = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
        cFile.write ('    }\n')
        cFile.write ('    // No Else: the checking parameters sets localError to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
        cFile.write ('    \n')
        
        cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
        cFile.write ('    {\n')
        
        cFile.write ('        ARSAL_Mutex_Lock (&(feature->privatePart->mutex));\n')
        cFile.write ('        \n')
                
        cFile.write ('        // Find elements\n')
        cFile.write ('        HASH_FIND_INT (feature->privatePart->dictionary, &(commandKey), commandDic);\n')
        cFile.write ('        if (commandDic != NULL)\n')
        cFile.write ('        {\n')
        cFile.write ('            elements = commandDic->elements;\n')
        cFile.write ('        }\n')
        cFile.write ('        // NO Else ; Command not found \n')
        cFile.write ('        \n')
        
        cFile.write ('        ARSAL_Mutex_Unlock (&(feature->privatePart->mutex));\n')
        cFile.write ('        \n')
        
        cFile.write ('        if (elements == NULL)\n')
        cFile.write ('        {\n')
        cFile.write ('            localError = ARCONTROLLER_ERROR_NO_ELEMENT;\n')
        cFile.write ('        }\n')
        cFile.write ('    }\n')
        cFile.write ('    \n')
        
        cFile.write ('    // Return the error\n')
        cFile.write ('    if (error != NULL)\n')
        cFile.write ('    {\n')
        cFile.write ('        *error = localError;\n')
        cFile.write ('    }\n')
        cFile.write ('    // No else: error is not returned \n')
        cFile.write ('    \n')
        
        cFile.write ('    return elements;\n')
        cFile.write ('}\n')
        cFile.write ('\n')
        
        cFile.write ('/************************\n')
        cFile.write (' * Private Implementation\n')
        cFile.write (' *************************/\n')
        

    cFile.close () # see automake all source of folder !!!!!!!!
    
def generateFeatureControllersJNI (allFeatures, JNI_C_DIR, JNI_JAVA_DIR):
    
    #########################################
    # Write Device controller JNI java file #
    #########################################
    
    for feature in allFeatures:
    
        className = 'ARFeature'+ ARCapitalize(feature.name)
        classPrivateName = ARTypeName (MODULE_ARCONTROLLER, 'device', 'private')

        fileName = className+'.java'
        filepath = JNI_JAVA_DIR + fileName
        jfile = open (filepath, 'w')

        jfile.write ('/**********************************************************\n')
        jfile.write (' *            AUTOGENERATED FILE                          *\n')
        jfile.write (' *             DO NOT MODIFY IT                           *\n')
        jfile.write (' *                                                        *\n')
        jfile.write (' * To add new commands :                                  *\n')
        jfile.write (' *  - Modify ../Xml/commands.xml file                     *\n')
        jfile.write (' *  - Re-run generateDeviceControllers.py script          *\n')
        jfile.write (' *                                                        *\n')
        jfile.write (' **********************************************************/\n')
        jfile.write ('\n')

        jfile.write ('/**\n')
        jfile.write (' * @file '+fileName+'\n')
        jfile.write (' * @brief Feature controller allow to send command related of '+feature.name+' Feature.\n')
        for comment in feature.comments:
            jfile.write (' * ' + comment+'\n')
        jfile.write (' */\n')
        
        jfile.write ('package com.parrot.arsdk.arcontroller;\n')
        jfile.write ('\n')
        jfile.write ('import com.parrot.arsdk.arsal.ARSALPrint;\n')
        jfile.write ('import com.parrot.arsdk.arcommands.*;\n')
        jfile.write ('import com.parrot.arsdk.ardiscovery.ARDiscoveryDevice;\n')
        jfile.write ('\n')
        jfile.write ('import java.util.List;\n')
        jfile.write ('import java.util.ArrayList;\n')
        jfile.write ('\n')
        jfile.write ('public class '+className+'\n')
        jfile.write ('{\n')
        jfile.write ('    private static String TAG = "'+className+'";\n')
        jfile.write ('    \n')
        
        for cl in feature.classes:
            if isEvent(cl) or isState(cl):
                for cmd in cl.cmds:
                    for arg in cmd.args:
                        jfile.write ('    public static String ' + defineNotification(feature, cl, cmd, arg) + ' = ""; /**< Key of the argument </code>'+arg.name+'</code> of class <code>' + ARCapitalize (cl.name) + '</code> in feature <code>' + ARCapitalize (feature.name) + '</code> */\n')
        jfile.write ('\n')
        for cl in feature.classes:
            if isEvent(cl) or isState(cl):
                for cmd in cl.cmds:
                    for arg in cmd.args:
                        jfile.write ('    private static native String ' + nativeGetNotificationVal(feature, cl, cmd, arg) + ' ();\n')
        jfile.write ('\n')
        
        for cl in feature.classes:
            if not isEvent(cl) and not isState(cl):
                for cmd in cl.cmds:
                    jfile.write ('    private native int '+nativeSendingFunction(cl, cmd)+' (long jFeature')
                    for arg in cmd.args:
                        if 'enum' == arg.type:
                            jfile.write (', int ' + arg.name + '')
                        else:
                            jfile.write (', ' + xmlToJava (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' ' + arg.name + '')
                    jfile.write (');\n')
                
                    if cmd.buf == ARCommandBuffer.NON_ACK:
                        jfile.write ('    private native int '+nativeSetNAckFunction(cl, cmd)+' (long jFeature')
                        for arg in cmd.args:
                            if 'enum' == arg.type:
                                jfile.write (', int ' + arg.name + '')
                            else:
                                jfile.write (', ' + xmlToJava (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' ' + arg.name + '')
                        jfile.write (');\n')
                    
                        for arg in cmd.args:
                            if 'enum' == arg.type:
                                jfile.write ('    private native int '+nativeSetNAckFunction(cl, cmd, arg)+' (long jFeature, int ' + arg.name + ');\n')
                            else:
                                jfile.write ('    private native int '+nativeSetNAckFunction(cl, cmd, arg)+' (long jFeature, ' + xmlToJava (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' ' + arg.name + ');\n')
        jfile.write ('\n')
        
        jfile.write ('    private long jniFeature;\n')
        jfile.write ('    private boolean initOk;\n')
        jfile.write ('    \n')
        jfile.write ('    static\n')
        jfile.write ('    {\n')
        for cl in feature.classes:
            if isEvent(cl) or isState(cl):
                for cmd in cl.cmds:
                    for arg in cmd.args:
                        jfile.write ('        ' + defineNotification(feature, cl, cmd, arg) + ' = '+ nativeGetNotificationVal(feature, cl, cmd, arg) + ' ();\n')
        jfile.write ('    }\n')
        jfile.write ('    \n')
        
        jfile.write ('    /**\n')
        jfile.write ('     * Constructor\n')
        jfile.write ('     */\n')
        jfile.write ('    public '+className+' (long nativeFeature)\n')
        jfile.write ('    {\n')
        jfile.write ('        initOk = false;\n')
        jfile.write ('        \n')
        jfile.write ('        if (nativeFeature != 0)\n')
        jfile.write ('        {\n')
        jfile.write ('            jniFeature = nativeFeature;\n')
        jfile.write ('            initOk = true;\n')
        jfile.write ('        }\n')
        jfile.write ('    }\n')
        jfile.write ('\n')
        jfile.write ('    /**\n')
        jfile.write ('     * Dispose\n')
        jfile.write ('     */\n')
        jfile.write ('    public void dispose()\n')
        jfile.write ('    {\n')
        jfile.write ('        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;\n')
        jfile.write ('        synchronized (this)\n')
        jfile.write ('        {\n')
        jfile.write ('            if(initOk == true)\n')
        jfile.write ('            {\n')
        jfile.write ('                jniFeature = 0;\n')
        jfile.write ('                initOk = false;\n')
        jfile.write ('            }\n')
        jfile.write ('        }\n')
        jfile.write ('    }\n')
        jfile.write ('\n')
        jfile.write ('    /**\n')
        jfile.write ('     * Destructor\n')
        jfile.write ('     */\n')
        jfile.write ('    public void finalize () throws Throwable\n')
        jfile.write ('    {\n')
        jfile.write ('        try\n')
        jfile.write ('        {\n')
        jfile.write ('            dispose ();\n')
        jfile.write ('        }\n')
        jfile.write ('        finally\n')
        jfile.write ('        {\n')
        jfile.write ('            super.finalize ();\n')
        jfile.write ('        }\n')
        jfile.write ('    }\n')
        jfile.write ('    \n')
        
        for cl in feature.classes:
            if not isEvent(cl) and not isState(cl):
                for cmd in cl.cmds:
                    jfile.write ('    public ARCONTROLLER_ERROR_ENUM '+sendingFunction (cl, cmd)+' (')
                    first = True
                    for arg in cmd.args:
                        if first:
                            first = False
                        else :
                            jfile.write (', ')
                        jfile.write (xmlToJava (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' _' + arg.name + '')
                    jfile.write (')\n')
                    
                    jfile.write ('    {\n')
                    jfile.write ('        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;\n')
                    jfile.write ('        synchronized (this)\n')
                    jfile.write ('        {\n')
                    jfile.write ('            if(initOk == true)\n')
                    jfile.write ('            {\n')
                    jfile.write ('                int nativeError = '+nativeSendingFunction(cl, cmd)+' (jniFeature')
                    for arg in cmd.args:
                        jfile.write (', _' + arg.name)
                        if 'enum' == arg.type:
                            jfile.write ('.getValue()')
                    jfile.write (');\n')
                    jfile.write ('                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);\n')
                    jfile.write ('            }\n')
                    jfile.write ('        }\n')
                    jfile.write ('        return error;\n')
                    jfile.write ('    }\n')
                    jfile.write ('    \n')
                    
                    if cmd.buf == ARCommandBuffer.NON_ACK:
                        jfile.write ('    public ARCONTROLLER_ERROR_ENUM '+javaSetNAckFunction (cl, cmd)+' (')
                        isFirst = True
                        for arg in cmd.args:
                            if isFirst:
                                isFirst = False
                            else:
                                jfile.write (', ')
                            jfile.write (xmlToJava (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' _' + arg.name)
                        jfile.write (')\n')
                        jfile.write ('    {\n')
                        jfile.write ('        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;\n')
                        jfile.write ('        synchronized (this)\n')
                        jfile.write ('        {\n')
                        jfile.write ('            if(initOk == true)\n')
                        jfile.write ('            {\n')
                        jfile.write ('                int nativeError = '+nativeSetNAckFunction(cl, cmd)+' (jniFeature')
                        for arg in cmd.args:
                            jfile.write (', _' + arg.name)
                            if 'enum' == arg.type:
                                jfile.write ('.getValue()')
                        jfile.write (');\n')
                        jfile.write ('                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);\n')
                        jfile.write ('            }\n')
                        jfile.write ('        }\n')
                        jfile.write ('        return error;\n')
                        jfile.write ('    }\n')
                        jfile.write ('    \n')
                        
                        for arg in cmd.args:
                            jfile.write ('    public ARCONTROLLER_ERROR_ENUM '+javaSetNAckFunction (cl, cmd, arg)+' (' + xmlToJava (MODULE_ARCOMMANDS, feature, cl, cmd, arg) + ' _' + arg.name+')\n')
                            jfile.write ('    {\n')
                            jfile.write ('        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;\n')
                            jfile.write ('        synchronized (this)\n')
                            jfile.write ('        {\n')
                            jfile.write ('            if(initOk == true)\n')
                            jfile.write ('            {\n')
                            if 'enum' == arg.type:
                                jfile.write ('                int nativeError = '+nativeSetNAckFunction(cl, cmd, arg)+' (jniFeature, _' + arg.name + '.getValue());\n')
                            else:
                                jfile.write ('                int nativeError = '+nativeSetNAckFunction(cl, cmd, arg)+' (jniFeature, _' + arg.name + ');\n')
                            jfile.write ('                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);\n')
                            jfile.write ('            }\n')
                            jfile.write ('        }\n')
                            jfile.write ('        return error;\n')
                            jfile.write ('    }\n')
                            jfile.write ('    \n')
                        
                    
        jfile.write ('\n')
        jfile.write ('}\n')

        jfile.write ('\n')
        
        
    #################################################
    # Write Feature controller JNI c file           #
    #################################################
    
    for feature in allFeatures:
        
        javaClassName = 'ARFeature'+ ARCapitalize(feature.name)
        jniClassName = MODULE_ARCONTROLLER + '_JNI_Feature'+ ARCapitalize(feature.name) #ARTypeName (MODULE_FEATURE, 'JNI_'+feature.name, '')
        className = ARTypeName (MODULE_FEATURE, feature.name, '')
        classTag = 'ARCONTROLLER_JNIFEATURE'+feature.name.upper()+'_TAG'

        cFileName = jniClassName + '.c'
        filepath = JNI_C_DIR + cFileName
        cFile = open (filepath, 'w')

        cFile.write ('/**********************************************************\n')
        cFile.write (' *            AUTOGENERATED FILE                          *\n')
        cFile.write (' *             DO NOT MODIFY IT                           *\n')
        cFile.write (' *                                                        *\n')
        cFile.write (' * To add new commands :                                  *\n')
        cFile.write (' *  - Modify ../Xml/commands.xml file                     *\n')
        cFile.write (' *  - Re-run generateFeatureControllers.py script         *\n')
        cFile.write (' *                                                        *\n')
        cFile.write (' **********************************************************/\n')
        cFile.write ('\n')

        cFile.write ('/**\n')
        cFile.write ('* @file '+jniClassName+'\n')
        cFile.write ('* @brief '+ARTypeName (MODULE_FEATURE, feature.name, '')+' JNI feature '+feature.name+' c file.\n')
        cFile.write ('*/\n')
        cFile.write ('\n')
        
        cFile.write ('/*****************************************\n')
        cFile.write (' *\n')
        cFile.write (' *             include file :\n')
        cFile.write (' *\n')
        cFile.write (' *****************************************/\n')
        cFile.write ('\n')
        cFile.write ('#include <jni.h>\n')
        cFile.write ('#include <stdlib.h>\n')
        cFile.write ('\n')
        cFile.write ('#include <libARSAL/ARSAL_Print.h>\n')
        cFile.write ('\n')
        cFile.write ('#include <libARController/ARCONTROLLER_Error.h>\n')
        cFile.write ('#include <libARController/ARCONTROLLER_Feature.h>\n')
        cFile.write ('\n')
        cFile.write ('/*****************************************\n')
        cFile.write (' *\n')
        cFile.write (' *             define :\n')
        cFile.write (' *\n')
        cFile.write (' *****************************************/\n')
        cFile.write ('\n')
        cFile.write ('#define '+classTag+' "'+jniClassName+'"\n')
        cFile.write ('\n')
        cFile.write ('/*****************************************\n')
        cFile.write (' *\n')
        cFile.write (' *             private header:\n')
        cFile.write (' *\n')
        cFile.write (' *****************************************/\n')
        cFile.write ('\n')
        cFile.write ('\n')
        cFile.write ('/*****************************************\n')
        cFile.write (' *\n')
        cFile.write (' *             implementation :\n')
        cFile.write (' *\n')
        cFile.write (' *****************************************/\n')
        cFile.write ('\n')
        
        for cl in feature.classes:
            if isEvent(cl) or isState(cl):
                for cmd in cl.cmds:
                    for arg in cmd.args:
                        cFile.write ('JNIEXPORT jstring JNICALL\n')
                        cFile.write ('Java_com_parrot_arsdk_arcontroller_'+javaClassName+'_' + nativeGetNotificationVal(feature, cl, cmd, arg) + ' (JNIEnv *env , jclass class)\n')
                        cFile.write ('{\n')
                        cFile.write ('    return (*env)->NewStringUTF(env, '+defineNotification(feature, cl, cmd, arg)+');\n')
                        cFile.write ('}\n')
                        cFile.write ('\n')
        
        for cl in feature.classes:
            if not isEvent(cl) and not isState(cl):
                for cmd in cl.cmds:
                    cFile.write ('JNIEXPORT jint JNICALL\n')
                    cFile.write ('Java_com_parrot_arsdk_arcontroller_'+javaClassName+'_'+nativeSendingFunction(cl, cmd)+' (JNIEnv *env, jobject thizz, jlong jFeature')
                    for arg in cmd.args:
                        cFile.write (', ' + xmlToJNI (arg) + ' _' + arg.name + '')
                    cFile.write (')\n')
                    cFile.write ('{\n')
                    cFile.write ('    // local declarations\n')
                    cFile.write ('    '+className+' *nativeFeature = ('+className+'*) (intptr_t) jFeature;\n')
                    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
                    hasArgString = False
                    for arg in cmd.args:
                        if (arg.type == 'string'):
                            hasArgString = True
                            cFile.write ('    const char *native'+ARCapitalize(arg.name)+' = (*env)->GetStringUTFChars(env, _'+arg.name+', 0);\n')
                    cFile.write ('    \n')
                    cFile.write ('    error = nativeFeature->'+sendingFunction(cl, cmd)+' (nativeFeature')
                    for arg in cmd.args:
                        if (arg.type == 'string'):
                            cFile.write (', (char *)native'+ARCapitalize(arg.name))
                        else:
                            cFile.write (', _' + arg.name)
                    cFile.write (');\n')
                    cFile.write ('\n')
    
                    if hasArgString:
                        cFile.write ('    // cleanup\n')
                    for arg in cmd.args:
                        if (arg.type == 'string'):
                            cFile.write ('    (*env)->ReleaseStringUTFChars(env, _'+arg.name+', native'+ARCapitalize(arg.name)+');\n')
                            
                    if hasArgString:
                        cFile.write ('\n')
                    
                    cFile.write ('    return error;\n')
                    cFile.write ('}\n')
                    cFile.write ('\n')
                    
                    if cmd.buf == ARCommandBuffer.NON_ACK:
                        cFile.write ('JNIEXPORT jint JNICALL\n')
                        cFile.write ('Java_com_parrot_arsdk_arcontroller_'+javaClassName+'_'+nativeSetNAckFunction(cl, cmd)+' (JNIEnv *env, jobject thizz, jlong jFeature')
                        for arg in cmd.args:
                            cFile.write (', ' + xmlToJNI (arg) + ' _' + arg.name + '')
                        cFile.write (')\n')
                        cFile.write ('{\n')
                        cFile.write ('    // local declarations\n')
                        cFile.write ('    '+className+' *nativeFeature = ('+className+'*) (intptr_t) jFeature;\n')
                        cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
                        hasArgString = False
                        for arg in cmd.args:
                            if (arg.type == 'string'):
                                hasArgString = True
                                cFile.write ('    const char *native'+ARCapitalize(arg.name)+' = (*env)->GetStringUTFChars(env, _'+arg.name+', 0);\n')
                        cFile.write ('    \n')
                        cFile.write ('    error = nativeFeature->'+setNAckFunction(cl, cmd)+' (nativeFeature')
                        for arg in cmd.args:
                            if (arg.type == 'string'):
                                cFile.write (', (char *)native'+ARCapitalize(arg.name))
                            else:
                                cFile.write (', _' + arg.name)
                        cFile.write (');\n')
                        cFile.write ('\n')
        
                        if hasArgString:
                            cFile.write ('    // cleanup\n')
                        for arg in cmd.args:
                            if (arg.type == 'string'):
                                cFile.write ('    (*env)->ReleaseStringUTFChars(env, _'+arg.name+', native'+ARCapitalize(arg.name)+');\n')
                                
                        if hasArgString:
                            cFile.write ('\n')
                        
                        cFile.write ('    return error;\n')
                        cFile.write ('}\n')
                        cFile.write ('\n')
                            
                        for arg in cmd.args:
                            cFile.write ('JNIEXPORT jint JNICALL\n')
                            cFile.write ('Java_com_parrot_arsdk_arcontroller_'+javaClassName+'_'+nativeSetNAckFunction(cl, cmd, arg)+' (JNIEnv *env, jobject thizz, jlong jFeature, ' + xmlToJNI (arg) + ' _' + arg.name + ')\n')
                            cFile.write ('{\n')
                            cFile.write ('    // local declarations\n')
                            cFile.write ('    '+className+' *nativeFeature = ('+className+'*) (intptr_t) jFeature;\n')
                            cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')

                            if (arg.type == 'string'):
                                cFile.write ('    const char *native'+ARCapitalize(arg.name)+' = (*env)->GetStringUTFChars(env, _'+arg.name+', 0);\n')
                            cFile.write ('    \n')
                            cFile.write ('    error = nativeFeature->'+setNAckFunction(cl, cmd, arg)+' (nativeFeature')
                            if (arg.type == 'string'):
                                cFile.write (', (char *)native'+ARCapitalize(arg.name))
                            else:
                                cFile.write (', _' + arg.name)
                            cFile.write (');\n')
                            cFile.write ('\n')
            
                            if (arg.type == 'string'):
                                cFile.write ('    // cleanup\n')
                                cFile.write ('    (*env)->ReleaseStringUTFChars(env, _'+arg.name+', native'+ARCapitalize(arg.name)+');\n')
                                cFile.write ('\n')
                            
                            cFile.write ('    return error;\n')
                            cFile.write ('}\n')
                            cFile.write ('\n')
        
        cFile.close ()
