#!/usr/bin/env python

'''
    Copyright (C) 2014 Parrot SA

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in
      the documentation and/or other materials provided with the 
      distribution.
    * Neither the name of Parrot nor the names
      of its contributors may be used to endorse or promote products
      derived from this software without specific prior written
      permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
    OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
    OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.
'''

import sys
import os
import re

MYDIR=os.path.abspath(os.path.dirname(sys.argv[0]))
if '' == MYDIR:
    MYDIR=os.getcwd()

sys.path.append('%(MYDIR)s/../../ARBuildUtils/Utils/Python' % locals())

DEVICE_CONTROLLER_FILE_NAME = 'deviceControllers.xml'
DEVICE_CONTROLLER_FILE = MYDIR+'/../Xml/'+DEVICE_CONTROLLER_FILE_NAME

from ARFuncs import *
from ARCommandsParser import *
from ARControllerUtils import *

bref='Device controller allow to drive a device.'

def generateDeviceControllers (allFeatures, SRC_DIR, INC_DIR):
    
    deviceControllers = parseDeviceControllersXml (DEVICE_CONTROLLER_FILE, allFeatures)
    
    #check deviceController list
    if not deviceControllers:
        exit (1)
        
    ARPrint ('deviceControllers ...')
    for d in deviceControllers:
        ARPrint ('    name: ' + d.name)
    
    ARPrint ('generateDeviceControllers ...')
    
    #########################################
    # Write Device controller header file   #
    #########################################

    includeDefine = '_' + MODULE_DEVICE + '_H_'
    
    className = ARTypeName (MODULE_ARCONTROLLER, 'device', '')
    classPrivateName = ARTypeName (MODULE_ARCONTROLLER, 'device', 'private')

    headerFileName = 'ARCONTROLLER_Device.h'
    filepath = INC_DIR + headerFileName
    hfile = open (filepath, 'w')

    hfile.write ('/**********************************************************\n')
    hfile.write (' *            AUTOGENERATED FILE                          *\n')
    hfile.write (' *             DO NOT MODIFY IT                           *\n')
    hfile.write (' *                                                        *\n')
    hfile.write (' * To add new commands :                                  *\n')
    hfile.write (' *  - Modify ../Xml/commands.xml file                     *\n')
    hfile.write (' *  - Re-run generateDeviceControllers.py script          *\n')
    hfile.write (' *                                                        *\n')
    hfile.write (' **********************************************************/\n')
    hfile.write ('\n')

    hfile.write ('/**\n')
    hfile.write ('* @file '+headerFileName+'\n')
    hfile.write ('* @brief '+bref+'\n')
    hfile.write ('*/\n')
    hfile.write ('\n')

    hfile.write ('#ifndef '+includeDefine+'\n')
    hfile.write ('#define '+includeDefine+'\n')
    hfile.write ('\n')

    hfile.write ('#include <stdlib.h>\n')
    hfile.write ('\n')
    hfile.write ('#include <libARSAL/ARSAL_Print.h>\n')
    hfile.write ('#include <libARSAL/ARSAL_Mutex.h>\n')
    hfile.write ('#include <uthash/uthash.h>\n')
    hfile.write ('\n')
    hfile.write ('#include <libARController/ARCONTROLLER_Error.h>\n')
    hfile.write ('#include <libARController/ARCONTROLLER_Dictionary.h>\n')
    hfile.write ('#include <libARController/ARCONTROLLER_Feature.h>\n')
    hfile.write ('#include <libARController/ARCONTROLLER_Stream.h>\n')
    hfile.write ('\n')
    
    hfile.write ('/**\n')
    hfile.write (' * Enum characterizing the states of the device controller\n')
    hfile.write (' */\n')
    hfile.write ('typedef enum\n')
    hfile.write ('{\n')
    hfile.write ('    ARCONTROLLER_DEVICE_STATE_STOPPED = 0, /**< device controller is stopped */\n')
    hfile.write ('    ARCONTROLLER_DEVICE_STATE_STARTING, /**< device controller is starting */\n')
    hfile.write ('    ARCONTROLLER_DEVICE_STATE_RUNNING, /**< device controller is running */\n')
    hfile.write ('    ARCONTROLLER_DEVICE_STATE_PAUSED, /**< device controller is paused */\n')
    hfile.write ('    ARCONTROLLER_DEVICE_STATE_STOPPING, /**< device controller is stopping */\n')
    hfile.write ('    \n')
    hfile.write ('    ARCONTROLLER_DEVICE_STATE_MAX /**< Max of the enumeration */\n')
    hfile.write ('}eARCONTROLLER_DEVICE_STATE;\n')
    hfile.write ('\n')
    
    hfile.write ('/**\n')
    hfile.write (' * @brief Callback used when the state of the device Controller is changed.\n')
    hfile.write (' * @param[in] newState The new state of the Device Contoller\n')
    hfile.write (' * @param[in] error Error causing this new state.\n')
    hfile.write (' * @param[in] customData Custom Data set by the register\n')
    hfile.write (' */\n')
    hfile.write ('typedef void (*'+ARTypeName (MODULE_ARCONTROLLER, 'device', 'StateChangedCallback')+') (eARCONTROLLER_DEVICE_STATE newState, eARCONTROLLER_ERROR error, void *customData);\n')
    hfile.write ('\n')
    
    hfile.write ('/**\n')
    hfile.write (' * @brief Private part of the Device controller.\n')
    hfile.write (' */\n')
    hfile.write ('typedef struct '+classPrivateName+' '+classPrivateName+';\n')
    hfile.write ('\n')

    hfile.write ('/**\n')
    hfile.write (' * @brief Device controller allow to drive a device.\n')
    hfile.write (' */\n')
    hfile.write ('typedef struct\n')
    hfile.write ('{\n')
    for feature in allFeatures:
        hfile.write ('    '+ARTypeName (MODULE_FEATURE, feature.name, '')+' *'+ARUncapitalize(feature.name)+'; /**< */\n')
    hfile.write ('    '+classPrivateName+' *privatePart; /**< private part of the deviceController */\n')
    hfile.write ('}'+className+';\n')
    hfile.write ('\n')
    
    hfile.write ('/**\n')
    hfile.write (' * @brief Create a new Device Controller\n')
    hfile.write (' * @warning This function allocate memory\n')
    hfile.write (' * @post ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'Delete')+'() must be called to delete the Device Controller and free the memory allocated.\n')
    hfile.write (' * @param[in] discoveryDevice The device to drive ; must be not NULL.\n')
    hfile.write (' * @param[out] error executing error.\n')
    hfile.write (' * @return the new Device Controller\n')
    hfile.write (' * @see ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'Delete')+'\n')
    hfile.write (' */\n')
    hfile.write (''+className+' *' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'New')+' (ARDISCOVERY_Device_t *discoveryDevice, eARCONTROLLER_ERROR *error);\n')
    hfile.write ('\n')
    
    hfile.write ('/**\n')
    hfile.write (' * @brief Delete the Device Controller\n')
    hfile.write (' * @warning This function free memory\n')
    hfile.write (' * @param device The device controller to delete\n')
    hfile.write (' * @see ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'New')+'\n')
    hfile.write (' */\n')
    hfile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'Delete')+' ('+className+' **deviceController);\n')
    hfile.write ('\n')
    
    hfile.write ('/**\n')
    hfile.write (' * @brief Start the Device Controller.\n')
    hfile.write (' * @post ARCONTROLLER_Device_Stop() must be called to stop the Device Controller.\n')
    hfile.write (' * @param deviceController The device controller to start.\n')
    hfile.write (' * @return executing error.\n')
    hfile.write (' * @see ARCONTROLLER_Device_Stop\n')
    hfile.write (' */\n')
    hfile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'Start')+' ('+className+' *deviceController);\n')
    hfile.write ('\n')
    
    hfile.write ('/**\n')
    hfile.write (' * @brief Stop the Device Controller.\n')
    hfile.write (' * @param deviceController The device controller to Stop.\n')
    hfile.write (' * @return executing error.\n')
    hfile.write (' * @see ARCONTROLLER_Device_Start\n')
    hfile.write (' */\n')
    hfile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'Stop')+' ('+className+' *deviceController);\n')
    hfile.write ('\n')
    
    hfile.write ('/**\n')
    hfile.write (' * @brief Set callback to receive video.\n')
    hfile.write (' * @param deviceController The device controller.\n')
    hfile.write (' * @param receiveFrameCallback The callback when a frame is received.\n')
    hfile.write (' * @param timeoutFrameCallback The callback when timeout on receive.\n')
    hfile.write (' * @param[in] customData custom data given as parameter to the callback.\n')
    hfile.write (' * @return executing error.\n')
    hfile.write (' */\n')
    hfile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'SetVideoReceiveCallback')+' ('+className+' *deviceController, ARNETWORKAL_Stream_DidReceiveFrameCallback_t receiveFrameCallback, ARNETWORKAL_Stream_TimeoutFrameCallback_t timeoutFrameCallback, void *customData);\n')
    hfile.write ('\n')
    
    hfile.write ('/**\n')
    hfile.write (' * @brief Add callback to be informed when a commands is received.\n')
    hfile.write (' * @param deviceController The device controller.\n')
    hfile.write (' * @param commandReceivedCallback The callback when a commands is received.\n')
    hfile.write (' * @param[in] customData custom data given as parameter to the callback.\n')
    hfile.write (' * @return executing error.\n')
    hfile.write (' */\n')
    hfile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'AddCommandReceivedCallback')+' ('+className+' *deviceController, ARCONTROLLER_DICTIONARY_CALLBACK_t commandReceivedCallback, void *customData);\n')
    hfile.write ('\n')
    
    hfile.write ('/**\n')
    hfile.write (' * @brief Remove callback of command received information.\n')
    hfile.write (' * @param deviceController The device controller.\n')
    hfile.write (' * @param commandReceivedCallback The callback to remove.\n')
    hfile.write (' * @param[in] customData custom data associated to the callback.\n')
    hfile.write (' * @return executing error.\n')
    hfile.write (' */\n')
    hfile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'RemoveCommandReceivedCallback')+' ('+className+' *deviceController, ARCONTROLLER_DICTIONARY_CALLBACK_t commandReceivedCallback, void *customData);\n')
    hfile.write ('\n')
    
    hfile.write ('/**\n')
    hfile.write (' * @brief Add callback of Device Controller state changed information.\n')
    hfile.write (' * @param deviceController The device controller.\n')
    hfile.write (' * @param StateChangedCallback The callback to add.\n')
    hfile.write (' * @param[in] customData custom data given as parameter to the callback.\n')
    hfile.write (' * @return executing error.\n')
    hfile.write (' */\n')
    hfile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'AddStateChangedCallback')+' ('+className+' *deviceController, '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'StateChangedCallback')+' stateChangedCallback, void *customData);\n')
    hfile.write ('\n')
    
    hfile.write ('/**\n')
    hfile.write (' * @brief Remove callback of Device Controller state changed information.\n')
    hfile.write (' * @param deviceController The device controller.\n')
    hfile.write (' * @param StateChangedCallback The callback to remove.\n')
    hfile.write (' * @param[in] customData custom data associated to the callback.\n')
    hfile.write (' * @return executing error.\n')
    hfile.write (' */\n')
    hfile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'RemoveStateChangedCallback')+' ('+className+' *deviceController, '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'StateChangedCallback')+' stateChangedCallback, void *customData);\n')
    hfile.write ('\n')
    
    hfile.write ('/**\n')
    hfile.write (' * @brief Get Element of a command received.\n')
    hfile.write (' * @param deviceController The device controller.\n')
    hfile.write (' * @param[in] commandKey The key of the command.\n')
    hfile.write (' * @param[out] error Executing error.\n')
    hfile.write (' * @return Element dictionary of the command\n')
    hfile.write (' */\n')
    hfile.write ('ARCONTROLLER_DICTIONARY_ELEMENT_t *' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'GetCommandElements')+' ('+className+' *deviceController, '+defineNotificationDef()+' commandKey, eARCONTROLLER_ERROR *error);\n')
    hfile.write ('\n')
    
    hfile.write ('/**\n')
    hfile.write (' * @brief Get the Device Controller state and notify all listeners.\n')
    hfile.write (' * @param deviceController The device controller.\n')
    hfile.write (' * @return The state of the Device Controller.\n')
    hfile.write (' */\n')
    hfile.write ('eARCONTROLLER_DEVICE_STATE ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'GetState')+' ('+className+' *deviceController, eARCONTROLLER_ERROR *error);\n')
    hfile.write ('\n')
    
    hfile.write ('#endif /* '+includeDefine+' */\n')
    hfile.write ('\n')
    hfile.write ('// END GENERATED CODE\n')
    hfile.close ()
    
    #################################################
    # Write Device controller private header file   #
    #################################################

    includeDefine = '_' + MODULE_DEVICE + '_PRIVATE_H_'

    headerPrivateFileName = 'ARCONTROLLER_Device' + '.h'
    filepath = SRC_DIR + headerPrivateFileName
    hPrivFile = open (filepath, 'w')

    hPrivFile.write ('/**********************************************************\n')
    hPrivFile.write (' *            AUTOGENERATED FILE                          *\n')
    hPrivFile.write (' *             DO NOT MODIFY IT                           *\n')
    hPrivFile.write (' *                                                        *\n')
    hPrivFile.write (' * To add new commands :                                  *\n')
    hPrivFile.write (' *  - Modify ../Xml/commands.xml file                     *\n')
    hPrivFile.write (' *  - Re-run generateDeviceControllers.py script          *\n')
    hPrivFile.write (' *                                                        *\n')
    hPrivFile.write (' **********************************************************/\n')
    hPrivFile.write ('\n')

    hPrivFile.write ('/**\n')
    hPrivFile.write ('* @file '+headerPrivateFileName+'\n')
    hPrivFile.write ('* @brief '+bref+'\n')
    hPrivFile.write ('*/\n')
    hPrivFile.write ('\n')

    hPrivFile.write ('#ifndef '+includeDefine+'\n')
    hPrivFile.write ('#define '+includeDefine+'\n')
    hPrivFile.write ('\n')
    hPrivFile.write ('#include <libARSAL/ARSAL_Mutex.h>\n')
    hPrivFile.write ('#include <libARController/ARCONTROLLER_DICTIONARY_Key.h>\n')
    hPrivFile.write ('#include <libARCommands/ARCommands.h>\n')
    hPrivFile.write ('#include <libARController/ARCONTROLLER_Feature.h>\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('#define '+ARMacroName (MODULE_ARCONTROLLER, 'Device', 'DEFAULT_LOOPER_CMD_BUFFER_SIZE')+' 1024\n')
    hPrivFile.write ('\n')
    
    #TODO add commentary
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief \n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('typedef struct '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+';\n')
    hPrivFile.write ('\n')
    hPrivFile.write ('struct '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+'\n')
    hPrivFile.write ('{\n')
    hPrivFile.write ('    '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'StateChangedCallback')+' callback; /**< callback used when the state is changed. */\n')
    hPrivFile.write ('    void *customData;  /**< custom data given as parameter to the callback. */\n')
    hPrivFile.write ('    \n')
    hPrivFile.write ('    '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' *next;\n')
    hPrivFile.write ('    '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' *prev;\n')
    hPrivFile.write ('};\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Device controller allow to drive a device.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('struct '+classPrivateName+'\n')
    hPrivFile.write ('{\n')
    hPrivFile.write ('    ARDISCOVERY_Device_t *discoveryDevice; /**< the device to drive */\n')
    hPrivFile.write ('    ARDISCOVERY_NetworkConfiguration_t networkConfiguration; /**< the networkConfiguration of the device*/\n')
    hPrivFile.write ('    ARCONTROLLER_Network_t *networkController; /**< the networkController to used to send and receive  */\n')
    hPrivFile.write ('    ARSAL_Sem_t initSem; /**< semaphore used for the initialisation */\n')
    hPrivFile.write ('    ARSAL_Mutex_t mutex; /**< Mutex for multithreading */\n')
    hPrivFile.write ('    eARCONTROLLER_DEVICE_STATE state; /**< state of the deviceController*/\n')
    hPrivFile.write ('    ARSAL_Thread_t controllerLooperThread; /**< looper threads used to send data in loop */\n')
    hPrivFile.write ('    ARCONTROLLER_DICTIONARY_CALLBAK_LIST_ELEMENT_t *commandCallbacks; /**< Array storing callbacks to use when a command is received. */\n')
    hPrivFile.write ('    '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+ ' *stateChangedCallbacks; /**< Array storing callbacks to use when a state is changed. */\n')
    hPrivFile.write ('    int startCancelled; /**< 1 if the start is canceled*/\n')
    hPrivFile.write ('    //video part\n')
    hPrivFile.write ('    int hasVideo; /**< 0 if the device has not Video stream ; otherwide 1 */\n')
    hPrivFile.write ('    ARNETWORKAL_Stream_DidReceiveFrameCallback_t videoReceiveCallback;\n')
    hPrivFile.write ('    ARNETWORKAL_Stream_TimeoutFrameCallback_t videoTimeoutCallback;\n')
    hPrivFile.write ('    void *videoReceiveCustomData;\n')
    hPrivFile.write ('};\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Start the Network.\n')
    hPrivFile.write (' * @post ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StopNetwork')+' must be call to stop the device Controller before destroy it.\n')
    hPrivFile.write (' * @warning This is a blocking function.\n')
    hPrivFile.write (' * @param deviceController The device controller to start its network.\n')
    hPrivFile.write (' * @return executing error.\n')
    hPrivFile.write (' * @see ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StopNetwork')+'.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StartNetwork')+' ('+className+' *deviceController);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Stop the Network.\n')
    hPrivFile.write (' * @param deviceController The device controller to stop its network.\n')
    hPrivFile.write (' * @return executing error.\n')
    hPrivFile.write (' * @see ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StartNetwork')+'.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StopNetwork')+' ('+className+' *deviceController);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Function called on start of the device.\n')
    hPrivFile.write (' * @param deviceController The device controller on start.\n')
    hPrivFile.write (' * @return executing error.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'OnStart')+' ('+className+' *deviceController);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Set the network controller of the device controller to its features.\n')
    hPrivFile.write (' * @param deviceController The device controller.\n')
    hPrivFile.write (' * @return executing error.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'SetNetworkControllerToFeatures')+' ('+className+' *deviceController);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Register callback for each command received.\n')
    hPrivFile.write (' * @param deviceController The device controller.\n')
    hPrivFile.write (' * @return executing error.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'RegisterCallbacks')+' ('+className+' *deviceController);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Unregister callback for each command received.\n')
    hPrivFile.write (' * @param deviceController The device controller.\n')
    hPrivFile.write (' * @return executing error.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'UnregisterCallbacks')+' ('+className+' *deviceController);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Start the looper thread sending pcmd commands.\n')
    hPrivFile.write (' * @param deviceController The device controller.\n')
    hPrivFile.write (' * @return executing error.\n')
    hPrivFile.write (' * @see ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StopControllerLooperThread')+'.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StartControllerLooperThread')+' ('+className+' *deviceController);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Stop the looper thread sending pcmd commands.\n')
    hPrivFile.write (' * @param deviceController The device controller.\n')
    hPrivFile.write (' * @return executing error.\n')
    hPrivFile.write (' * @see ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StartControllerLooperThread')+'.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StopControllerLooperThread')+' ('+className+' *deviceController);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Run of the looper thread.\n')
    hPrivFile.write (' * @param data The device controller.\n')
    hPrivFile.write (' * @return NULL.\n')
    hPrivFile.write (' * @see ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StartControllerLooperThread')+'.\n')
    hPrivFile.write (' * @see ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StopControllerLooperThread')+'.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('void *' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'ControllerLooperThread')+' (void *data);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Set the Initial Date for the device.\n')
    hPrivFile.write (' * @param deviceController The device controller.\n')
    hPrivFile.write (' * @return executing error.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'SetInitialDate')+' ('+className+' *deviceController);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Get the Initial Settings of the device.\n')
    hPrivFile.write (' * @param deviceController The device controller.\n')
    hPrivFile.write (' * @return executing error.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'GetInitialSettings')+' ('+className+' *deviceController);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Get the Initial States of the device.\n')
    hPrivFile.write (' * @param deviceController The device controller.\n')
    hPrivFile.write (' * @return executing error.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'GetInitialStates')+' ('+className+' *deviceController);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Callback used when the settings or states of the device are changed.\n')
    hPrivFile.write (' * @param deviceController The device controller.\n')
    hPrivFile.write (' * @return executing error.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'DictionaryChangedCallback')+' ('+defineNotificationDef()+' commandKey, ARCONTROLLER_DICTIONARY_ELEMENT_t *elementDictionary, void *customData); // TODO int -> ARCommands Big \n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Function called when all initials states of the device are received.\n')
    hPrivFile.write (' * @param deviceController The device controller.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'OnAllStatesEnd')+' ('+className+' *deviceController);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Function called when all initials settings of the device are received.\n')
    hPrivFile.write (' * @param deviceController The device controller.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'OnAllSettingsEnd')+' ('+className+' *deviceController);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Callback used to add a json part during the device connection.\n')
    hPrivFile.write (' * @param jsonObj The json in which to add.\n')
    hPrivFile.write (' * @param customData The device controller.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('eARDISCOVERY_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'SendJsonCallback')+' (json_object *jsonObj, void *customData);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Callback used to receive a json part during the device connection.\n')
    hPrivFile.write (' * @param jsonObj The json in which to read.\n')
    hPrivFile.write (' * @param customData The device controller.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write  ('eARDISCOVERY_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'ReceiveJsonCallback')+' (json_object *jsonObj, void *customData);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Callback used when the Network Controller is Disconnected.\n')
    hPrivFile.write (' * @param customData The device controller on diconnection.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write  ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'OnDisconnectCallback')+' (void *customData);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Start thread run .\n')
    hPrivFile.write (' * @param data The device controller on diconnection.\n')
    hPrivFile.write (' * @return NULL.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('void *' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StartRun')+' (void *data);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Stop thread run .\n')
    hPrivFile.write (' * @param data The device controller on diconnection.\n')
    hPrivFile.write (' * @return NULL.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('void *' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StopRun')+' (void *data);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Add a callback in a list.\n')
    hPrivFile.write (' * @param callbackList The list of callbacks.\n')
    hPrivFile.write (' * @param[in] callback The callback to add.\n')
    hPrivFile.write (' * @param[in] customData Data given as parameter to the callback.\n')
    hPrivFile.write (' * @return Executing error.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'AddCallbackInList')+' ('+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' **callbackList, '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'StateChangedCallback')+' callback, void *customData);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Remove a callback from a list.\n')
    hPrivFile.write (' * @param callbackList The list of callbacks.\n')
    hPrivFile.write (' * @param[in] callback The callback to remove.\n')
    hPrivFile.write (' * @param[in] customData Data given at the adding of the callback.\n')
    hPrivFile.write (' * @return Executing error.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'RemoveCallbackFromList')+' ('+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' **callbackList, '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'StateChangedCallback')+' callback, void *customData);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write (' /**\n')
    hPrivFile.write ('  * @brief Delete all callback of a list.\n')
    hPrivFile.write ('  * @param callbackList The list of callbacks.\n')
    hPrivFile.write ('  */\n')
    hPrivFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'DeleteCallbackList')+' ('+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' **callbackList);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Notify all callback of a list.\n')
    hPrivFile.write (' * @param callbackList The list of callbacks.\n')
    hPrivFile.write (' * @param[in] state The state of the device Controller ; given as parameter to the callback.\n')
    hPrivFile.write (' * @param[in] error Error causing this new state.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'NotifyAllCallbackInList')+' ('+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' **callbackList, eARCONTROLLER_DEVICE_STATE state, eARCONTROLLER_ERROR error);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('/**\n')
    hPrivFile.write (' * @brief Set the Device Controller state and notify all listeners.\n')
    hPrivFile.write (' * @param deviceController The device controller.\n')
    hPrivFile.write (' * @param[in] error Error causing this new state.\n')
    hPrivFile.write (' */\n')
    hPrivFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'SetState')+' ('+className+' *deviceController, eARCONTROLLER_DEVICE_STATE state, eARCONTROLLER_ERROR error);\n')
    hPrivFile.write ('\n')
    
    hPrivFile.write ('#endif /* '+includeDefine+' */\n')
    hPrivFile.write ('\n')
    hPrivFile.write ('// END GENERATED CODE\n')
    hPrivFile.close ()
    
    #################################################
    # Write Device controller c file                #
    #################################################
    
    classTag = 'ARCONTROLLER_Device'
    className = 'ARCONTROLLER_Device_t'
    
    cFileName = 'ARCONTROLLER_Device.c'
    filepath = SRC_DIR + cFileName
    cFile = open (filepath, 'w')

    cFile.write ('/**********************************************************\n')
    cFile.write (' *            AUTOGENERATED FILE                          *\n')
    cFile.write (' *             DO NOT MODIFY IT                           *\n')
    cFile.write (' *                                                        *\n')
    cFile.write (' * To add new commands :                                  *\n')
    cFile.write (' *  - Modify ../Xml/commands.xml file                     *\n')
    cFile.write (' *  - Re-run generateDeviceControllers.py script          *\n')
    cFile.write (' *                                                        *\n')
    cFile.write (' **********************************************************/\n')
    cFile.write ('\n')

    cFile.write ('/**\n')
    cFile.write ('* @file '+cFileName+'\n')
    cFile.write ('* @brief '+bref+'\n')
    cFile.write ('*/\n')
    cFile.write ('\n')

    cFile.write ('#ifdef WIN32\n')
    cFile.write ('\n')
    cFile.write ('#include <stdint.h>\n')
    cFile.write ('\n')
    cFile.write ('typedef uint8_t u_int8_t;\n')
    cFile.write ('typedef uint16_t u_int16_t;\n')
    cFile.write ('typedef uint32_t u_int32_t;\n')
    cFile.write ('\n')
    cFile.write ('#endif\n')

    cFile.write ('#include <stdio.h>\n')
    cFile.write ('#include <time.h>\n')
    cFile.write ('#include <json/json.h>\n')
    cFile.write ('\n')
    
    cFile.write ('#include <libARSAL/ARSAL_Mutex.h>\n')
    cFile.write ('#include <libARSAL/ARSAL_Sem.h>\n')
    cFile.write ('#include <libARSAL/ARSAL_Time.h>\n')
    cFile.write ('#include <libARController/ARCONTROLLER_Network.h>\n')
    cFile.write ('#include <libARController/ARCONTROLLER_Feature.h>\n')
    cFile.write ('#include <libARController/ARCONTROLLER_DICTIONARY_Key.h>\n')
    cFile.write ('#include <libARController/ARCONTROLLER_Dictionary.h>\n')
    cFile.write ('#include <libARController/ARCONTROLLER_Frame.h>\n')
    cFile.write ('#include <libARController/ARCONTROLLER_Stream.h>\n')
    cFile.write ('#include <libARController/ARCONTROLLER_Device.h>\n')
    cFile.write ('\n')
    cFile.write ('#include "ARCONTROLLER_Device.h"\n')
    cFile.write ('\n')
    
    cFile.write ('#define '+MODULE_DEVICE+'_TAG "'+classTag+'"\n')
    cFile.write ('\n')
    
    cFile.write ('/*****************************************\n')
    cFile.write (' *\n')
    cFile.write (' *             local header:\n')
    cFile.write (' *\n')
    cFile.write (' ****************************************/\n')
    cFile.write ('\n')

    cFile.write ('int ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'ElementCompare')+'('+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' *a, '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' *b);\n')
    cFile.write ('\n')
    
    
    
    cFile.write ('/*****************************************\n')
    cFile.write (' *\n')
    cFile.write (' *             implementation:\n')
    cFile.write (' *\n')
    cFile.write (' ****************************************/\n')
    cFile.write ('\n')
    
    cFile.write (''+className+' *' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'New')+' (ARDISCOVERY_Device_t *discoveryDevice, eARCONTROLLER_ERROR *error)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Create a new Device Controller --\n')
    cFile.write ('    \n')
    
    cFile.write ('    //local declarations\n')
    cFile.write ('    eARCONTROLLER_ERROR localError = ARCONTROLLER_OK;\n')
    cFile.write ('    eARDISCOVERY_ERROR dicoveryError = ARDISCOVERY_OK;\n')
    cFile.write ('    '+className+' *deviceController =  NULL;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if (discoveryDevice == NULL)\n')
    cFile.write ('    {\n')
    cFile.write ('        localError = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets localError to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Allocate the Device Controller\n')
    cFile.write ('    deviceController = malloc (sizeof('+className+'));\n')
    cFile.write ('    if (deviceController != NULL)\n')
    cFile.write ('    {\n')
    cFile.write ('        //initialization of the device controller\n')
    for feature in allFeatures:
        cFile.write ('        deviceController->'+ARUncapitalize(feature.name)+' = NULL;\n')
    cFile.write ('        deviceController->privatePart = NULL;\n')
    cFile.write ('    }\n')
    cFile.write ('    else\n')
    cFile.write ('    {\n')
    cFile.write ('        localError = ARCONTROLLER_ERROR_ALLOC;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        // Allocate the private part of the Device Controller\n')
    cFile.write ('        deviceController->privatePart = malloc (sizeof('+classPrivateName+'));\n')
    cFile.write ('        if (deviceController != NULL)\n')
    cFile.write ('        {\n')
    cFile.write ('            //initialization of the private part of the device controller\n')
    cFile.write ('            deviceController->privatePart->networkController = NULL;\n')
    cFile.write ('            deviceController->privatePart->state = ARCONTROLLER_DEVICE_STATE_STOPPED;\n')
    cFile.write ('            deviceController->privatePart->controllerLooperThread = NULL;\n')
    cFile.write ('            deviceController->privatePart->commandCallbacks = NULL;\n')
    cFile.write ('            deviceController->privatePart->stateChangedCallbacks = NULL;\n')
    cFile.write ('            deviceController->privatePart->startCancelled = 0;\n')
    cFile.write ('            // Video Part\n')
    cFile.write ('            deviceController->privatePart->hasVideo = 0;\n')
    cFile.write ('            deviceController->privatePart->videoReceiveCallback = NULL;\n')
    cFile.write ('            deviceController->privatePart->videoTimeoutCallback = NULL;\n')
    cFile.write ('            deviceController->privatePart->videoReceiveCustomData = NULL;\n')
    cFile.write ('            \n')
    
    cFile.write ('            // Create the mutex/condition \n')
    cFile.write ('            if ((ARSAL_Mutex_Init (&(deviceController->privatePart->mutex)) != 0) ||\n')
    cFile.write ('               (ARSAL_Sem_Init (&(deviceController->privatePart->initSem), 0, 0) != 0))\n')
    cFile.write ('            {\n')
    cFile.write ('                localError = ARCONTROLLER_ERROR_INIT_MUTEX;\n')
    cFile.write ('            }\n')
    
    cFile.write ('        }\n')
    cFile.write ('        else\n')
    cFile.write ('        {\n')
    cFile.write ('            localError = ARCONTROLLER_ERROR_ALLOC;\n')
    cFile.write ('        }\n')
    cFile.write ('        \n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: skipped by an error\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        // Copy the device\n')
    cFile.write ('        \n')
    cFile.write ('        deviceController->privatePart->discoveryDevice = ARDISCOVERY_Device_NewByCopy (discoveryDevice, &dicoveryError);\n')
    cFile.write ('        if (dicoveryError != ARDISCOVERY_OK)\n')
    cFile.write ('        {\n')
    cFile.write ('            localError = ARCONTROLLER_ERROR_INIT_DEVICE_COPY;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Get networkConfiguration of the device\n')
    cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        dicoveryError = ARDISCOVERY_Device_InitNetworkCongifuration (deviceController->privatePart->discoveryDevice, &(deviceController->privatePart->networkConfiguration));\n')
    cFile.write ('        if (dicoveryError != ARDISCOVERY_OK)\n')
    cFile.write ('        {\n')
    cFile.write ('            localError = ARCONTROLLER_ERROR_INIT_DEVICE_GET_NETWORK_CONFIG;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: skipped by an error\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        // Check if the device has video\n')
    cFile.write ('        if (deviceController->privatePart->networkConfiguration.deviceToControllerARStreamData != -1)\n')
    cFile.write ('        {\n')
    cFile.write ('            deviceController->privatePart->hasVideo = 1;\n')
    cFile.write ('        }\n')
    cFile.write ('        //NO else ; device has not video\n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: skipped by an error\n')
    cFile.write ('    \n')

    cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        // Creation of the features:\n')
    cFile.write ('        switch (discoveryDevice->productID)\n')
    cFile.write ('        {\n')
    for deviceController in deviceControllers:
        cFile.write ('            case '+discoveryProduct (deviceController.product)+':\n')
        for featureName in deviceController.features:
            cFile.write ('                if (localError == ARCONTROLLER_OK)\n')
            cFile.write ('                {\n')
            cFile.write ('                    deviceController->'+ARUncapitalize(featureName)+' = ' + ARFunctionName (MODULE_FEATURE, featureName, 'New')+' (deviceController->privatePart->networkController, &localError);\n')
            cFile.write ('                }\n')
            cFile.write ('                \n')
        cFile.write ('                break;\n')
        cFile.write ('            \n')
        
    cFile.write ('            default:\n')
    cFile.write ('                ARSAL_PRINT(ARSAL_PRINT_ERROR, '+MODULE_DEVICE+'_TAG, "device : %d not known", discoveryDevice->productID);\n')
    cFile.write ('                break;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: skipped by an error\n')
    cFile.write ('    \n')
    
    cFile.write ('    // delete the Device Controller if an error occurred\n')
    cFile.write ('    if (localError != ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'Delete')+' (&deviceController);\n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: skipped no error \n')
    cFile.write ('    \n')
    
    cFile.write ('    // Return the error\n')
    cFile.write ('    if (error != NULL)\n')
    cFile.write ('    {\n')
    cFile.write ('        *error = localError;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: error is not returned \n')
    cFile.write ('    \n')
    
    cFile.write ('    return deviceController;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'Delete')+' ('+className+' **deviceController)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Delete the Device Controller --\n')
    cFile.write ('    \n')

    cFile.write ('    if (deviceController != NULL)\n')
    cFile.write ('    {\n')
    cFile.write ('        if ((*deviceController) != NULL)\n')
    cFile.write ('        {\n')
    cFile.write ('            if ((*deviceController)->privatePart != NULL)\n')
    cFile.write ('            {\n')
    cFile.write ('                ARSAL_Mutex_Destroy (&((*deviceController)->privatePart->mutex));\n')
    cFile.write ('                \n')
    
    cFile.write ('                ARSAL_Sem_Destroy (&((*deviceController)->privatePart->initSem));\n')
    cFile.write ('                \n')
    
    cFile.write ('                if ((*deviceController)->privatePart->commandCallbacks != NULL)\n')
    cFile.write ('                {\n')
    cFile.write ('                    // -- Delete all callback in array --\n')
    cFile.write ('                    ARCONTROLLER_Dictionary_DeleteCallbackList(&((*deviceController)->privatePart->commandCallbacks));\n')
    cFile.write ('                }\n')
    cFile.write ('                \n')
    
    cFile.write ('                if ((*deviceController)->privatePart->stateChangedCallbacks != NULL)\n')
    cFile.write ('                {\n')
    cFile.write ('                    // -- Delete all callback in array --\n')
    cFile.write ('                    ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'DeleteCallbackList')+'(&((*deviceController)->privatePart->stateChangedCallbacks));\n')
    cFile.write ('                }\n')
    cFile.write ('                \n')
    
    cFile.write ('                // Delete features:\n')
    cFile.write ('                switch ((*deviceController)->privatePart->discoveryDevice->productID)\n')
    cFile.write ('                {\n')
    for deviceController in deviceControllers:
        cFile.write ('                    case '+discoveryProduct (deviceController.product)+':\n')
        for featureName in deviceController.features:
            cFile.write ('                        ' + ARFunctionName (MODULE_FEATURE, featureName, 'Delete')+' (&((*deviceController)->'+ARUncapitalize(featureName)+'));\n')
            cFile.write ('                        \n')
        cFile.write ('                        break;\n')
        cFile.write ('                    \n')
    
    cFile.write ('                    default:\n')
    cFile.write ('                        ARSAL_PRINT(ARSAL_PRINT_ERROR, '+MODULE_DEVICE+'_TAG, "device : %d not known", (*deviceController)->privatePart->discoveryDevice->productID);\n')
    cFile.write ('                        break;\n')
    cFile.write ('                }\n')
    cFile.write ('                \n')
    
    cFile.write ('                ARDISCOVERY_Device_Delete (&((*deviceController)->privatePart->discoveryDevice));\n')
    cFile.write ('                \n')
    
    cFile.write ('                // free the private part of the Device Controller\n')
    cFile.write ('                free ((*deviceController)->privatePart);\n')
    cFile.write ('                (*deviceController)->privatePart = NULL;\n')
    cFile.write ('            }\n')
    cFile.write ('            \n')
    
    cFile.write ('            // free the Device Controller\n')
    cFile.write ('            free (*deviceController);\n')
    cFile.write ('            (*deviceController) = NULL;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'RegisterCallbacks')+' ('+className+' *deviceController)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Register the Callbacks --\n')
    cFile.write ('    \n')
    
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if (deviceController == NULL)\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets localError to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    for feature in allFeatures:
        cFile.write ('    if (deviceController->'+ARUncapitalize(feature.name)+' != NULL)\n')
        cFile.write ('    {\n')
        for cl in feature.classes:
            
            if isState(cl):
                for cmd in cl.cmds:
                    cFile.write ('        if (error == ARCONTROLLER_OK)\n')
                    cFile.write ('        {\n')
                    cFile.write ('            error = '+ARFunctionName(MODULE_FEATURE, feature.name, 'addCallback')+' (deviceController->'+ARUncapitalize(feature.name)+', '+defineNotification(feature, cl, cmd)+', ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'DictionaryChangedCallback')+', deviceController);\n')
                    cFile.write ('        }\n')
                    cFile.write ('        \n')
        cFile.write ('    }\n')
        cFile.write ('    \n')
        
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'UnregisterCallbacks')+' ('+className+' *deviceController)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Unregister the Callbacks --\n')
    cFile.write ('    \n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    eARCONTROLLER_ERROR removingError = ARCONTROLLER_OK;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if (deviceController == NULL)\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets localError to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    
    for feature in allFeatures:
        cFile.write ('        if (deviceController->'+ARUncapitalize(feature.name)+' != NULL)\n')
        cFile.write ('        {\n')
        
        for cl in feature.classes:
            if isState(cl):
                for cmd in cl.cmds:
                    cFile.write ('            removingError = '+ARFunctionName(MODULE_FEATURE, feature.name, 'removeCallback')+' (deviceController->'+ARUncapitalize(feature.name)+', '+defineNotification(feature, cl, cmd)+', ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'DictionaryChangedCallback')+', deviceController);\n')
                    cFile.write ('            if (error != ARCONTROLLER_OK)\n')
                    cFile.write ('            {\n')
                    cFile.write ('                ARSAL_PRINT(ARSAL_PRINT_ERROR, '+MODULE_DEVICE+'_TAG, "Error occured durring removing of the callback for '+defineNotification(feature, cl, cmd)+'; error :%s", ARCONTROLLER_Error_ToString (removingError));\n')
                    cFile.write ('            }\n')
                    cFile.write ('            \n')
        cFile.write ('        }\n')
        cFile.write ('        \n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
            
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'Start')+' ('+className+' *deviceController)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Start the Device Controller --\n')
    cFile.write ('    \n')
    
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    ARSAL_Thread_t startingThread = NULL;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) || (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets localError to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK) \n')
    cFile.write ('    {\n')

    cFile.write ('        if (deviceController->privatePart->state == ARCONTROLLER_DEVICE_STATE_STOPPED)\n')
    cFile.write ('        {\n')
    cFile.write ('            ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'SetState')+' (deviceController, ARCONTROLLER_DEVICE_STATE_STARTING, ARCONTROLLER_OK);\n')
    
    cFile.write ('            if (ARSAL_Thread_Create (&startingThread, ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StartRun')+', deviceController) != 0)\n')
    cFile.write ('            {\n')
    cFile.write ('                ARSAL_PRINT(ARSAL_PRINT_ERROR, ARCONTROLLER_DEVICE_TAG, "Creation of Starting thread failed.");\n')
    cFile.write ('                error = ARCONTROLLER_ERROR_INIT_THREAD;\n')
    cFile.write ('            }\n')
    cFile.write ('            else\n')
    cFile.write ('            {\n')
    cFile.write ('                ARSAL_Thread_Destroy (&startingThread);\n')
    cFile.write ('                startingThread = NULL;\n')
    cFile.write ('            }\n')
    cFile.write ('            \n')
    cFile.write ('        }\n')
    cFile.write ('        \n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'Stop')+' ('+className+' *deviceController)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Stop the Device Controller --\n')
    cFile.write ('    \n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    ARSAL_Thread_t stoppingThread = NULL;\n')
    cFile.write ('    \n')
        
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if (deviceController == NULL)\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets localError to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    
    cFile.write ('    if (error == ARCONTROLLER_OK) \n')
    cFile.write ('    {\n')

    cFile.write ('        if (deviceController->privatePart->state == ARCONTROLLER_DEVICE_STATE_RUNNING)\n')
    cFile.write ('        {\n')
    cFile.write ('            ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'SetState')+' (deviceController, ARCONTROLLER_DEVICE_STATE_STOPPING, ARCONTROLLER_OK);\n')
    
    cFile.write ('            if (ARSAL_Thread_Create (&stoppingThread, ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StopRun')+', deviceController) != 0)\n')
    cFile.write ('            {\n')
    cFile.write ('                ARSAL_PRINT(ARSAL_PRINT_ERROR, ARCONTROLLER_DEVICE_TAG, "Creation of Stopping thread failed.");\n')
    cFile.write ('                error = ARCONTROLLER_ERROR_INIT_THREAD;\n')
    cFile.write ('            }\n')
    cFile.write ('            else\n')
    cFile.write ('            {\n')
    cFile.write ('                ARSAL_Thread_Destroy (&stoppingThread);\n')
    cFile.write ('                stoppingThread = NULL;\n')
    cFile.write ('            }\n')
    cFile.write ('            \n')
    cFile.write ('        }\n')
    cFile.write ('        else if ((deviceController->privatePart->state == ARCONTROLLER_DEVICE_STATE_STARTING) && (!deviceController->privatePart->startCancelled))\n')
    cFile.write ('        {\n')
    cFile.write ('            // Cancel the connection\n')
    cFile.write ('            ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'SetState')+' (deviceController, ARCONTROLLER_DEVICE_STATE_STOPPING, ARCONTROLLER_OK);\n')
    
    cFile.write ('            ARSAL_Mutex_Lock (&(deviceController->privatePart->mutex));\n')
    cFile.write ('            deviceController->privatePart->startCancelled = 1;\n')
    cFile.write ('            ARSAL_Sem_Post (&(deviceController->privatePart->initSem));\n')
    cFile.write ('            ARSAL_Sem_Post (&(deviceController->privatePart->initSem));\n')
    cFile.write ('            ARSAL_Mutex_Unlock (&(deviceController->privatePart->mutex));\n')
    
    cFile.write ('        }\n')
    cFile.write ('        \n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'SetVideoReceiveCallback')+' ('+className+' *deviceController, ARNETWORKAL_Stream_DidReceiveFrameCallback_t receiveFrameCallback, ARNETWORKAL_Stream_TimeoutFrameCallback_t timeoutFrameCallback, void *customData)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Set Video receive callback --\n')
    cFile.write ('    \n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    int locked = 1;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) ||\n')
    cFile.write ('        (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets localError to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        ARSAL_Mutex_Lock(&(deviceController->privatePart->mutex));\n')
    cFile.write ('        locked = 1;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        if (deviceController->privatePart->hasVideo)\n')
    cFile.write ('        {\n')
    cFile.write ('            deviceController->privatePart->videoReceiveCallback = receiveFrameCallback;\n')
    cFile.write ('            deviceController->privatePart->videoTimeoutCallback = timeoutFrameCallback;\n')
    cFile.write ('            deviceController->privatePart->videoReceiveCustomData = customData;\n')
    cFile.write ('        }\n')
    cFile.write ('        else\n')
    cFile.write ('        {\n')
    cFile.write ('            error = ARCONTROLLER_ERROR_NO_VIDEO;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    cFile.write ('    \n')
    
    cFile.write ('    if (locked)\n')
    cFile.write ('    {\n')
    cFile.write ('        ARSAL_Mutex_Unlock (&(deviceController->privatePart->mutex));\n')
    cFile.write ('        locked = 0;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'AddCommandReceivedCallback')+' ('+className+' *deviceController, ARCONTROLLER_DICTIONARY_CALLBACK_t commandReceivedCallback, void *customData)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Add Command received callback --\n')
    cFile.write ('    \n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    int locked = 1;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) ||\n')
    cFile.write ('        (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets localError to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        ARSAL_Mutex_Lock(&(deviceController->privatePart->mutex));\n')
    cFile.write ('        locked = 1;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_Dictionary_AddCallbackInList (&(deviceController->privatePart->commandCallbacks), commandReceivedCallback, customData);\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (locked)\n')
    cFile.write ('    {\n')
    cFile.write ('        ARSAL_Mutex_Unlock (&(deviceController->privatePart->mutex));\n')
    cFile.write ('        locked = 0;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'RemoveCommandReceivedCallback')+' ('+className+' *deviceController, ARCONTROLLER_DICTIONARY_CALLBACK_t commandReceivedCallback, void *customData)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Remove Command received callback --\n')
    cFile.write ('    \n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    int locked = 1;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) ||\n')
    cFile.write ('        (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets localError to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        ARSAL_Mutex_Lock(&(deviceController->privatePart->mutex));\n')
    cFile.write ('        locked = 1;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
        
    cFile.write ('        error = ARCONTROLLER_Dictionary_RemoveCallbackFromList (&(deviceController->privatePart->commandCallbacks), commandReceivedCallback, customData);\n')
    
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (locked)\n')
    cFile.write ('    {\n')
    cFile.write ('        ARSAL_Mutex_Unlock (&(deviceController->privatePart->mutex));\n')
    cFile.write ('        locked = 0;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('ARCONTROLLER_DICTIONARY_ELEMENT_t *' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'GetCommandElements')+' ('+className+' *deviceController, '+defineNotificationDef()+' commandKey, eARCONTROLLER_ERROR *error)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Get Command Elements --\n')
    cFile.write ('    \n')
    
    cFile.write ('    eARCONTROLLER_ERROR localError = ARCONTROLLER_OK;\n')
    cFile.write ('    ARCONTROLLER_DICTIONARY_ELEMENT_t *elements = NULL;\n')
    cFile.write ('    '+defineNotificationDef()+' featureKey = ' + ARFunctionName (MODULE_DICTIONARY, 'Key', 'GetFeatureFromCommandKey')+' (commandKey);\n')
    cFile.write ('    int locked = 1;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) ||\n')
    cFile.write ('        (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        localError = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets localError to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        ARSAL_Mutex_Lock(&(deviceController->privatePart->mutex));\n')
    cFile.write ('        locked = 1;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        switch (featureKey)\n')
    cFile.write ('        {\n')
    for feature in allFeatures:
        cFile.write ('            case '+defineNotification(feature)+':\n')
        cFile.write ('                elements = ' + ARFunctionName (MODULE_ARCONTROLLER, feature.name, 'GetCommandElements')+' (deviceController->'+ARUncapitalize(feature.name)+', commandKey, &localError);\n')
        cFile.write ('                \n')
        cFile.write ('                break;\n')
        cFile.write ('            \n')
    
    cFile.write ('            default :\n')
    cFile.write ('                ARSAL_PRINT(ARSAL_PRINT_ERROR, '+MODULE_DEVICE+'_TAG, "Error commandKey :%d not known", commandKey);\n')
    cFile.write ('                break;\n')
    cFile.write ('        }\n')
    cFile.write ('        \n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (locked)\n')
    cFile.write ('    {\n')
    cFile.write ('        ARSAL_Mutex_Unlock (&(deviceController->privatePart->mutex));\n')
    cFile.write ('        locked = 0;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Return the error\n')
    cFile.write ('    if (error != NULL)\n')
    cFile.write ('    {\n')
    cFile.write ('        *error = localError;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: error is not returned \n')
    cFile.write ('    \n')
    
    cFile.write ('    return elements;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'AddStateChangedCallback')+' ('+className+' *deviceController, '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'StateChangedCallback')+' stateChangedCallback, void *customData)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Add State Changed callback --\n')
    cFile.write ('    \n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    int locked = 1;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) ||\n')
    cFile.write ('        (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets localError to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        ARSAL_Mutex_Lock(&(deviceController->privatePart->mutex));\n')
    cFile.write ('        locked = 1;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        error = '+ ARFunctionName (MODULE_ARCONTROLLER, 'device', 'AddCallbackInList')+' (&(deviceController->privatePart->stateChangedCallbacks), stateChangedCallback, customData);\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (locked)\n')
    cFile.write ('    {\n')
    cFile.write ('        ARSAL_Mutex_Unlock (&(deviceController->privatePart->mutex));\n')
    cFile.write ('        locked = 0;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'RemoveStateChangedCallback')+' ('+className+' *deviceController, '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'StateChangedCallback')+' stateChangedCallback, void *customData)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Remove State Changed Callback --\n')
    cFile.write ('    \n')
    
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    int locked = 1;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) ||\n')
    cFile.write ('        (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets localError to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        ARSAL_Mutex_Lock(&(deviceController->privatePart->mutex));\n')
    cFile.write ('        locked = 1;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'RemoveCallbackFromList')+' (&(deviceController->privatePart->stateChangedCallbacks), stateChangedCallback, customData);\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (locked)\n')
    cFile.write ('    {\n')
    cFile.write ('        ARSAL_Mutex_Unlock (&(deviceController->privatePart->mutex));\n')
    cFile.write ('        locked = 0;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    

    cFile.write ('eARCONTROLLER_DEVICE_STATE ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'GetState')+' ('+className+' *deviceController, eARCONTROLLER_ERROR *error)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Get State --\n')
    cFile.write ('    \n')
    
    cFile.write ('    eARCONTROLLER_DEVICE_STATE state = ARCONTROLLER_DEVICE_STATE_MAX;\n')
    cFile.write ('    eARCONTROLLER_ERROR localError = ARCONTROLLER_OK;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) ||\n')
    cFile.write ('        (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        localError = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets localError to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        ARSAL_Mutex_Lock(&(deviceController->privatePart->mutex));\n')
    cFile.write ('        \n')
    
    cFile.write ('        state = deviceController->privatePart->state;\n')
    cFile.write ('        \n')
    
    cFile.write ('        ARSAL_Mutex_Unlock (&(deviceController->privatePart->mutex));\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Return the error\n')
    cFile.write ('    if (error != NULL)\n')
    cFile.write ('    {\n')
    cFile.write ('        *error = localError;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: error is not returned \n')
    cFile.write ('    \n')
    
    cFile.write ('    return state;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('\n')
    cFile.write ('/********************\n')
    cFile.write ('* Private Functions *\n')
    cFile.write ('*********************/\n')
    cFile.write ('\n')
    
    cFile.write ('void *' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StartRun')+' (void *data)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Thread Run of Start --\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Local declarations\n')
    cFile.write ('    '+className+' *deviceController = ('+className+' *) data;\n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) || (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if ((error == ARCONTROLLER_OK) && (!deviceController->privatePart->startCancelled))\n')
    cFile.write ('    {\n')    
    cFile.write ('        error = ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StartNetwork')+' (deviceController);\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if ((error == ARCONTROLLER_OK) && (!deviceController->privatePart->startCancelled))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'SetNetworkControllerToFeatures')+' (deviceController);\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if ((error == ARCONTROLLER_OK) && (!deviceController->privatePart->startCancelled))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StartControllerLooperThread')+' (deviceController);\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if ((error == ARCONTROLLER_OK) && (!deviceController->privatePart->startCancelled))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'RegisterCallbacks')+' (deviceController);\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if ((error == ARCONTROLLER_OK) && (!deviceController->privatePart->startCancelled))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'OnStart')+' (deviceController);\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if ((error == ARCONTROLLER_OK) && (!deviceController->privatePart->startCancelled))\n')
    cFile.write ('    {\n')
    cFile.write ('        ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'SetState')+' (deviceController, ARCONTROLLER_DEVICE_STATE_RUNNING, ARCONTROLLER_OK);\n')
    cFile.write ('    }\n')
    cFile.write ('    else\n')
    cFile.write ('    {\n')
    cFile.write ('        // Failed or canceled : Stop the DeviceController.\n')
    cFile.write ('        \n')
    cFile.write ('        if (deviceController->privatePart->startCancelled)\n')
    cFile.write ('        {\n')
    cFile.write ('            // DeviceController start canceled \n')
    cFile.write ('            error = ARCONTROLLER_ERROR_CANCELED;\n')
    cFile.write ('        }\n')
    cFile.write ('        ARSAL_PRINT(ARSAL_PRINT_INFO, '+MODULE_DEVICE+'_TAG, "Start failed or canceled.");\n')
    cFile.write ('        ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'SetState')+' (deviceController, ARCONTROLLER_DEVICE_STATE_STOPPING, error);\n')
    cFile.write ('        ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StopRun')+' (deviceController);\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Print error\n')
    cFile.write ('    if (error != ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        ARSAL_PRINT(ARSAL_PRINT_ERROR, '+MODULE_DEVICE+'_TAG, "Start fail error :%s", ARCONTROLLER_Error_ToString (error));\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    return NULL;\n')
    cFile.write ('}\n')
    
    cFile.write ('void *' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StopRun')+' (void *data)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Thread Run of Stop --\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Local declarations\n')
    cFile.write ('    '+className+' *deviceController = ('+className+' *) data;\n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) || (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'UnregisterCallbacks')+' (deviceController);\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StopControllerLooperThread')+' (deviceController);\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StopNetwork')+' (deviceController);\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'SetState')+' (deviceController, ARCONTROLLER_DEVICE_STATE_STOPPED, ARCONTROLLER_OK);\n')
    cFile.write ('    }\n')
    cFile.write ('    //else // TODO see what to do\n')
    cFile.write ('    //{\n')
    cFile.write ('    //    ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'SetState')+' (deviceController, ARCONTROLLER_DEVICE_STATE ???? , ARCONTROLLER_OK;\n')
    cFile.write ('    //}\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Print error\n')
    cFile.write ('    if (error != ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        ARSAL_PRINT(ARSAL_PRINT_ERROR, '+MODULE_DEVICE+'_TAG, "Stop fail error :%s", ARCONTROLLER_Error_ToString (error));\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    return NULL;\n')
    cFile.write ('}\n')
    
    cFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StartNetwork')+' ('+className+' *deviceController)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Start the Network --\n')
    cFile.write ('    \n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) || (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        // Create the Network Controller\n')
    cFile.write ('        deviceController->privatePart->networkController = ARCONTROLLER_Network_New (deviceController->privatePart->discoveryDevice, ARCONTROLLER_Device_OnDisconnectCallback, ARCONTROLLER_Device_SendJsonCallback, ARCONTROLLER_Device_ReceiveJsonCallback, deviceController, &error);\n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: skipped by an error\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        // If device has video\n')
    cFile.write ('        if (deviceController->privatePart->hasVideo)\n')
    cFile.write ('        {\n')
    cFile.write ('            error = ARCONTROLLER_Network_SetVideoReceiveCallback (deviceController->privatePart->networkController, deviceController->privatePart->videoReceiveCallback, deviceController->privatePart->videoTimeoutCallback, deviceController->privatePart->videoReceiveCustomData);\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: skipped by an error\n')
    cFile.write ('    \n')
    
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StopNetwork')+' ('+className+' *deviceController)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Stop the Network --\n')
    cFile.write ('    \n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) || (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        // Delete network:\n')
    cFile.write ('        ' + ARFunctionName (MODULE_ARCONTROLLER, "Network", 'Delete') + ' (&(deviceController->privatePart->networkController)); //TODO read error !!!!!!!! \n')
    cFile.write ('        \n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: skipped by an error\n')
    cFile.write ('    \n')
    
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'SetNetworkControllerToFeatures')+' ('+className+' *deviceController)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Set the Network Controoler to the Features --\n')
    cFile.write ('    \n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    eARCONTROLLER_ERROR settingError = ARCONTROLLER_OK;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) || (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    
    for feature in allFeatures:
        cFile.write ('        if (deviceController->'+ARUncapitalize(feature.name)+' != NULL)\n')
        cFile.write ('        {\n')
        cFile.write ('            settingError = '+ARFunctionName(MODULE_FEATURE, feature.name, 'SetNetworkController')+' (deviceController->'+ARUncapitalize(feature.name)+', deviceController->privatePart->networkController);\n')
        cFile.write ('            if (error != ARCONTROLLER_OK)\n')
        cFile.write ('            {\n')
        cFile.write ('                ARSAL_PRINT(ARSAL_PRINT_ERROR, '+MODULE_DEVICE+'_TAG, "Error occured durring setting the network Controller to the feature of the callback for '+defineNotification(feature, cl, cmd)+'; error :%s", ARCONTROLLER_Error_ToString (settingError));\n')
        cFile.write ('            }\n')
        cFile.write ('            \n')
        cFile.write ('        }\n')
        cFile.write ('        \n')
            
    cFile.write ('    }\n')
    cFile.write ('    // No else: skipped by an error\n')
    cFile.write ('    \n')
    
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StartControllerLooperThread')+' ('+className+' *deviceController)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Create the Sending Looper Thread --\n')
    cFile.write ('    \n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) || (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        if (ARSAL_Thread_Create (&(deviceController->privatePart->controllerLooperThread), ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'ControllerLooperThread')+', deviceController) != 0)\n')
    cFile.write ('        {\n')
    cFile.write ('            ARSAL_PRINT(ARSAL_PRINT_ERROR, ARCONTROLLER_DEVICE_TAG, "Creation of Controller Looper thread failed.");\n')
    cFile.write ('            error = ARCONTROLLER_ERROR_INIT_THREAD;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: skipped by an error\n')
    cFile.write ('    \n')
    
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'StopControllerLooperThread')+' ('+className+' *deviceController)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Create the Sending Looper Thread --\n')
    cFile.write ('    \n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) || (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        if (deviceController->privatePart->controllerLooperThread != NULL)\n')
    cFile.write ('        {\n')
    cFile.write ('            ARSAL_Thread_Join (deviceController->privatePart->controllerLooperThread, NULL);\n')
    cFile.write ('            ARSAL_Thread_Destroy (&(deviceController->privatePart->controllerLooperThread));\n')
    cFile.write ('            deviceController->privatePart->controllerLooperThread = NULL;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: skipped by an error\n')
    cFile.write ('    \n')
    
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'OnStart')+' ('+className+' *deviceController)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Device On Start --\n')
    cFile.write ('    \n')
    
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) || (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if ((error == ARCONTROLLER_OK) && (!deviceController->privatePart->startCancelled))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'SetInitialDate')+' (deviceController);\n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: skipped by an error\n')
    cFile.write ('    \n')
    
    cFile.write ('    if ((error == ARCONTROLLER_OK) && (!deviceController->privatePart->startCancelled))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'GetInitialSettings')+' (deviceController);\n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: skipped by an error\n')
    cFile.write ('    \n')
    
    cFile.write ('    if ((error == ARCONTROLLER_OK) && (!deviceController->privatePart->startCancelled))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'GetInitialStates')+' (deviceController);\n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: skipped by an error\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Manage cancel\n')
    cFile.write ('    if ((error == ARCONTROLLER_OK) && (deviceController->privatePart->startCancelled))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_CANCELED;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: skipped by an error or not canceled\n')
    cFile.write ('    \n')
    
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'SetInitialDate')+' ('+className+' *deviceController)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Set Initial Date --\n')
    cFile.write ('    \n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    time_t currentTime = (time_t)-1;\n')
    cFile.write ('    struct tm ts;\n')
    cFile.write ('    char data[20];\n')
    cFile.write ('    int dataSize = 0;\n')
    cFile.write ('    char strTime[20];\n')
    cFile.write ('    int strTimeSize = 0;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) || (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        currentTime = time(NULL);\n')
    cFile.write ('        if (currentTime == ((time_t)-1))\n')
    cFile.write ('        {\n')
    cFile.write ('            error = ARCONTROLLER_ERROR_INIT_GET_DATE;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: skipped by an error\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        ts = *localtime(&currentTime);\n')
    cFile.write ('        dataSize = strftime(data, sizeof(data), "%Y-%m-%d", &ts);\n')
    cFile.write ('        if (dataSize == 0)\n')
    cFile.write ('        {\n')
    cFile.write ('            error = ARCONTROLLER_ERROR_INIT_GET_DATE;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: skipped by an error\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        error = deviceController->common->sendCommonCurrentDate (deviceController->common, data);\n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: skipped by an error\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        ts = *localtime(&currentTime);\n')
    cFile.write ('        strTimeSize = strftime(strTime, sizeof(strTime), "T%H%M%S", &ts);\n')
    cFile.write ('        if (strTimeSize == 0)\n')
    cFile.write ('        {\n')
    cFile.write ('            error = ARCONTROLLER_ERROR_INIT_GET_DATE;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: skipped by an error\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        error = deviceController->common->sendCommonCurrentTime (deviceController->common, strTime);\n')
    cFile.write ('    }\n')
    cFile.write ('    // No else: skipped by an error\n')
    cFile.write ('    \n')
    
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'GetInitialSettings')+' ('+className+' *deviceController)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Get initial all Settings --\n')
    cFile.write ('    \n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if (deviceController == NULL)\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        error = deviceController->common->sendSettingsAllSettings (deviceController->common);\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        ARSAL_Sem_Wait (&(deviceController->privatePart->initSem));\n') # TODO manage error
    cFile.write ('    }\n')
    cFile.write ('    \n')
            
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'getInitialStates')+' ('+className+' *deviceController)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Get initial all States --\n')
    cFile.write ('    \n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if (deviceController == NULL)\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        error = deviceController->common->sendCommonAllStates (deviceController->common);\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        ARSAL_Sem_Wait (&(deviceController->privatePart->initSem));\n') # TODO manage error !!!!!!!!!!!!!!!!!!!
    cFile.write ('    }\n')
    cFile.write ('    \n')
            
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'DictionaryChangedCallback')+' ('+defineNotificationDef()+' commandKey, ARCONTROLLER_DICTIONARY_ELEMENT_t *elementDictionary, void *customData)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Callback of changing of a dictionary --\n')
    cFile.write ('    \n')
    
    cFile.write ('    '+className+' *deviceController = ('+className+' *) customData;\n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) ||\n')
    cFile.write ('        (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    \n')
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        // Notify All Callback\n')
    cFile.write ('        ARCONTROLLER_DICTIONARY_NotifyAllCallbackInList (&(deviceController->privatePart->commandCallbacks), commandKey, elementDictionary);\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        switch (commandKey)\n')
    cFile.write ('        {\n')
    cFile.write ('            case ARCONTROLLER_DICTIONARY_KEY_COMMON_COMMONSTATE_ALLSTATESCHANGED:\n')
    cFile.write ('                ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'OnAllStatesEnd')+' (deviceController);\n')
    cFile.write ('                break;\n')
    cFile.write ('            \n')
    
    cFile.write ('            case ARCONTROLLER_DICTIONARY_KEY_COMMON_SETTINGSSTATE_ALLSETTINGSCHANGED:\n')
    cFile.write ('                ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'OnAllSettingsEnd')+' (deviceController);\n')
    cFile.write ('                break;\n')
    cFile.write ('            \n')
    
    cFile.write ('            default :\n')
    cFile.write ('                //Do Nothing\n')
    cFile.write ('                break;\n')
    cFile.write ('            \n')
    
    cFile.write ('        }\n')
    cFile.write ('        \n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'OnAllStatesEnd')+' ('+className+' *deviceController)\n')
    cFile.write ('{\n')
    
    cFile.write ('    // -- End of receiving of initial all States --\n')
    cFile.write ('    \n')
    
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) || (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        ARSAL_Sem_Post (&(deviceController->privatePart->initSem));\n') # TODO manage error
    cFile.write ('    }\n')
    cFile.write ('    \n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'OnAllSettingsEnd')+' ('+className+' *deviceController)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- End of receiving of initial all Settings --\n')
    cFile.write ('    \n')
    
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) || (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        ARSAL_Sem_Post (&(deviceController->privatePart->initSem));\n') # TODO manage error
    cFile.write ('    }\n')
    cFile.write ('    \n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARDISCOVERY_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'SendJsonCallback')+' (json_object *jsonObj, void *customData)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Connection callback to receive the Json --\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Local declarations\n')
    cFile.write ('    '+className+' *deviceController = customData;\n')
    cFile.write ('    eARDISCOVERY_ERROR error = ARDISCOVERY_OK;\n')
    cFile.write ('    \n')
    
    cFile.write ('    json_object *valueJsonObj = NULL;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((jsonObj == NULL) ||\n')
    cFile.write ('        (deviceController == NULL) ||\n')
    cFile.write ('        (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARDISCOVERY_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARDISCOVERY_OK)\n')
    cFile.write ('    {\n')
    
    cFile.write ('        // add ARDISCOVERY_CONNECTION_JSON_CONTROLLER_NAME_KEY\n')
    cFile.write ('        valueJsonObj = json_object_new_string ("DEFAULT_SDK_CONTROLLER"); //TODO get from the device controller\n')
    cFile.write ('        json_object_object_add (jsonObj, ARDISCOVERY_CONNECTION_JSON_CONTROLLER_NAME_KEY, valueJsonObj);\n')
    cFile.write ('        \n')
    
    cFile.write ('        // add ARDISCOVERY_CONNECTION_JSON_CONTROLLER_TYPE_KEY\n')
    cFile.write ('        valueJsonObj = json_object_new_string ("DEFAULT_SDK_TYPE"); //TODO get from the device controller\n')
    cFile.write ('        json_object_object_add (jsonObj, ARDISCOVERY_CONNECTION_JSON_CONTROLLER_TYPE_KEY, valueJsonObj);\n')
    cFile.write ('        \n')
    
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARDISCOVERY_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'ReceiveJsonCallback')+' (json_object *jsonObj, void *customData)\n')
    cFile.write ('{\n')
    cFile.write ('     // -- Connection callback to receive the Json --\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Local declarations\n')
    cFile.write ('    '+className+' *deviceController = customData;\n')
    cFile.write ('    eARDISCOVERY_ERROR error = ARDISCOVERY_OK;\n')
    cFile.write ('    \n')
    
    cFile.write ('    if ((jsonObj == NULL) ||\n')
    cFile.write ('        (deviceController == NULL) ||\n')
    cFile.write ('        (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARDISCOVERY_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARDISCOVERY_OK)\n')
    cFile.write ('    {\n')
    #TODO see what to do or remove function !!!!!!!!!!!!!!!!!!!!!!
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write  ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'OnDisconnectCallback')+' (void *customData)\n')
    cFile.write ('{\n')
    cFile.write ('     // -- Disconnection callback --\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Local declarations\n')
    cFile.write ('    '+className+' *deviceController = ('+className+' *) customData;\n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) || (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        error =' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'Stop')+' (deviceController);\n')
    cFile.write ('    }\n')
    
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('void *' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'ControllerLooperThread')+' (void *data)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Sending Looper Thread --\n')
    cFile.write ('    \n')
    
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    '+className+' *deviceController = data;\n')
    cFile.write ('    u_int8_t cmdBuffer['+ARMacroName (MODULE_ARCONTROLLER, 'Device', 'DEFAULT_LOOPER_CMD_BUFFER_SIZE')+'];\n')
    cFile.write ('    int controllerLoopIntervalUs = 0;\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Check parameters\n')
    cFile.write ('    if ((deviceController == NULL) || (deviceController->privatePart == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    // No Else: the checking parameters sets error to ARNETWORK_ERROR_BAD_PARAMETER and stop the processing\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        controllerLoopIntervalUs = MSEC_TO_USEC (deviceController->privatePart->networkConfiguration.controllerLoopIntervalMs);\n')
    cFile.write ('        if (!(controllerLoopIntervalUs > 0))\n')
    cFile.write ('        {\n')
    cFile.write ('            error = ARCONTROLLER_ERROR;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        while ((deviceController->privatePart->state == ARCONTROLLER_DEVICE_STATE_RUNNING) ||\n')
    cFile.write ('               (deviceController->privatePart->state == ARCONTROLLER_DEVICE_STATE_STARTING) ||\n')
    cFile.write ('               (deviceController->privatePart->state == ARCONTROLLER_DEVICE_STATE_PAUSED))\n')
    cFile.write ('        {\n')
    cFile.write ('            //TODO manager pause !!!!!!!!!!!!!!!!!!!!!!!!!\n')
    cFile.write ('            usleep (controllerLoopIntervalUs);\n')
    cFile.write ('            \n')
    
    for feature in allFeatures: 
        #if there are NON_ACK cmd
        if [cmd for cl in feature.classes for cmd in cl.cmds if cmd.buf == ARCommandBuffer.NON_ACK]:
            cFile.write ('            if (deviceController->'+ARUncapitalize(feature.name)+' != NULL)\n')
            cFile.write ('            {\n')
            for cl in feature.classes:
                for cmd in cl.cmds:
                    if cmd.buf == ARCommandBuffer.NON_ACK:
                        cFile.write ('                error = '+ sendNAckFunctionName (feature, cl, cmd)+' (deviceController->'+ARUncapitalize(feature.name)+', cmdBuffer, '+ARMacroName (MODULE_ARCONTROLLER, 'Device', 'DEFAULT_LOOPER_CMD_BUFFER_SIZE')+');\n')
                        cFile.write ('                if (error != ARCONTROLLER_OK)\n')
                        cFile.write ('                {\n')
                        cFile.write ('                    ARSAL_PRINT (ARSAL_PRINT_ERROR, '+MODULE_DEVICE+'_TAG, "Error occured while send '+cmd.name+' : %s", ARCONTROLLER_Error_ToString (error));\n')
                        cFile.write ('                }\n')
                        cFile.write ('                \n')
            cFile.write ('            }\n')
            cFile.write ('            \n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    
    cFile.write ('    return NULL;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'AddCallbackInList')+' ('+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' **callbackList, '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'StateChangedCallback')+' callback, void *customData)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Add callback in array --\n')
    cFile.write ('    \n')
    cFile.write ('    // Local declarations\n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' *newElement = NULL;\n')
    cFile.write ('\n')
    
    cFile.write ('    // Add the callback\n')
    cFile.write ('    newElement = malloc (sizeof('+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+'));\n')
    cFile.write ('    if (newElement != NULL)\n')
    cFile.write ('    {\n')
    cFile.write ('        newElement->callback = callback;\n')
    cFile.write ('        newElement->customData = customData;\n')
    cFile.write ('        DL_APPEND ((*callbackList), newElement);\n')
    cFile.write ('    }\n')
    cFile.write ('    else\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_ALLOC;\n')
    cFile.write ('    }\n')
    cFile.write ('\n')
    
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('eARCONTROLLER_ERROR ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'RemoveCallbackFromList')+' ('+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' **callbackList, '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'StateChangedCallback')+' callback, void *customData)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Remove callback from array --\n')
    cFile.write ('\n')
        
    cFile.write ('    // Local declarations\n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' *elementFind = NULL;\n')
    cFile.write ('    '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' likeElement;\n')
    cFile.write ('\n')
    
    cFile.write ('    // Element to find\n')
    cFile.write ('    likeElement.callback = callback;\n')
    cFile.write ('    likeElement.customData = customData;\n')
    cFile.write ('\n')
        
    cFile.write ('    DL_SEARCH ((*callbackList), elementFind, &likeElement, ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'ElementCompare')+');\n')
    cFile.write ('    if (elementFind != NULL)\n')
    cFile.write ('    {\n')
    cFile.write ('        DL_DELETE ((*callbackList), elementFind);\n')
    cFile.write ('    }\n')
    cFile.write ('    else\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_ERROR_COMMAND_CALLBACK_NOT_REGISTERED;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    cFile.write ('    return error;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'DeleteCallbackList')+' ('+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' **callbackList)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Delete all callback in array --\n')
    cFile.write ('    \n')
    
    cFile.write ('    // Local declarations\n')
    cFile.write ('    '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' *element = NULL;\n')
    cFile.write ('    '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' *elementTmp = NULL;\n')
    cFile.write ('\n')
    
    cFile.write ('    // Delete each element, use the safe iterator\n')
    cFile.write ('    DL_FOREACH_SAFE ((*callbackList), element, elementTmp)\n')
    cFile.write ('    {\n')
    cFile.write ('        DL_DELETE ((*callbackList), element);\n')
    cFile.write ('    }\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'NotifyAllCallbackInList')+' ('+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' **callbackList, eARCONTROLLER_DEVICE_STATE state, eARCONTROLLER_ERROR error)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Notify all listeners --\n')
    cFile.write ('    \n')
        
    cFile.write ('    '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' *callbackElement = NULL;\n')
    cFile.write ('    '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' *callbackElementTmp = NULL;\n')
    cFile.write ('\n')
       
    cFile.write ('    // for each callback\n')
    cFile.write ('    DL_FOREACH_SAFE ((*callbackList), callbackElement, callbackElementTmp)\n')
    cFile.write ('    {\n')
    cFile.write ('        if (callbackElement->callback != NULL)\n')
    cFile.write ('        {\n')
    cFile.write ('            callbackElement->callback (state, error, callbackElement->customData);\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('void ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'SetState')+' ('+className+' *deviceController, eARCONTROLLER_DEVICE_STATE state,  eARCONTROLLER_ERROR error)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Set the Device Controller State and notify all listeners.\n')
    cFile.write ('    \n')
    
    cFile.write ('    ARSAL_Mutex_Lock (&(deviceController->privatePart->mutex));\n')
    cFile.write ('    deviceController->privatePart->state = state;\n')
    cFile.write ('    ARSAL_Mutex_Unlock (&(deviceController->privatePart->mutex));\n')
    cFile.write ('    ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'NotifyAllCallbackInList')+' (&(deviceController->privatePart->stateChangedCallbacks), deviceController->privatePart->state, error);\n')
    cFile.write ('    \n')
    
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('/*****************************************\n')
    cFile.write (' *\n')
    cFile.write (' *             local implementation:\n')
    cFile.write (' *\n')
    cFile.write (' ****************************************/\n')
    cFile.write ('\n')

    cFile.write ('int ' + ARFunctionName (MODULE_ARCONTROLLER, 'device', 'ElementCompare')+'('+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' *a, '+ARTypeName (MODULE_ARCONTROLLER, 'device', 'STATE_CHANGED_CALLBACK_ELEMENT')+' *b)\n')
    cFile.write ('{\n')
    cFile.write ('    return !((a->callback == b->callback) && (a->customData == b->customData));\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    
    cFile.close ()

def generateControllersJNI (allFeatures, JNI_C_DIR, JNI_JAVA_DIR):
    
    #########################################
    # Write Device controller header file   #
    #########################################
    
    className = 'ARDeviceController'
    classPrivateName = ARTypeName (MODULE_ARCONTROLLER, 'device', 'private')

    fileName = 'ARDeviceController.java'
    filepath = JNI_JAVA_DIR + fileName
    jfile = open (filepath, 'w')

    jfile.write ('/**********************************************************\n')
    jfile.write (' *            AUTOGENERATED FILE                          *\n')
    jfile.write (' *             DO NOT MODIFY IT                           *\n')
    jfile.write (' *                                                        *\n')
    jfile.write (' * To add new commands :                                  *\n')
    jfile.write (' *  - Modify ../Xml/commands.xml file                     *\n')
    jfile.write (' *  - Re-run generateDeviceControllers.py script          *\n')
    jfile.write (' *                                                        *\n')
    jfile.write (' **********************************************************/\n')
    jfile.write ('\n')

    jfile.write ('/**\n')
    jfile.write ('* @file '+fileName+'\n')
    jfile.write ('* @brief '+bref+'\n')
    jfile.write ('*/\n')
    jfile.write ('\n')
    
    jfile.write ('package com.parrot.arsdk.arcontroller;\n')
    jfile.write ('\n')
    jfile.write ('import com.parrot.arsdk.arsal.ARSALPrint;\n')
    jfile.write ('import com.parrot.arsdk.arcommands.*;\n')
    jfile.write ('import com.parrot.arsdk.ardiscovery.ARDiscoveryDevice;\n')
    jfile.write ('\n')
    jfile.write ('import com.parrot.arsdk.arsal.ARNativeData;\n')
    jfile.write ('\n')
    jfile.write ('import java.util.List;\n')
    jfile.write ('import java.util.ArrayList;\n')
    jfile.write ('\n')
    jfile.write ('public class ARDeviceController\n')
    jfile.write ('{\n')
    jfile.write ('    private static String TAG = "ARDeviceController";\n')
    jfile.write ('    \n')
    jfile.write ('    private static native void nativeStaticInit ();\n')
    jfile.write ('    \n')
    jfile.write ('    private native long nativeNew(long jdevice) throws ARControllerException;\n')
    jfile.write ('    private native void nativeDelete(long jARDeviceController);\n')
    jfile.write ('    \n')
    jfile.write ('    private native int nativeStart (long jDeviceController);\n')
    jfile.write ('    private native int nativeStop (long jDeviceController);\n')
    jfile.write ('    \n')
    
    for feature in allFeatures:
        jfile.write ('    private native long '+nativeGetFeature(feature)+' (long jDeviceController);\n')
        
    jfile.write ('    private native int nativeGetState (long jDeviceController) throws ARControllerException;\n')
    jfile.write ('    private native long nativeGetCommandElements(long jDeviceController, int commandKey) throws ARControllerException;\n')

    jfile.write ('\n')
    jfile.write ('    private long jniDeviceController;\n')
    jfile.write ('    private boolean initOk;\n')
    jfile.write ('    \n')
    jfile.write ('    private List<ARDeviceControllerListener> listeners;\n')
    jfile.write ('    private List<ARDeviceControllerStreamListener> streamlisteners;\n')

    
    for feature in allFeatures:
        jfile.write ('    '+javaFeatureClassName(feature)+' '+javaFeatureName(feature)+';\n')
    
    
    jfile.write ('    \n')
    jfile.write ('    static\n')
    jfile.write ('    {\n')
    jfile.write ('        nativeStaticInit();\n')
    jfile.write ('    }\n')
    jfile.write ('\n')
    jfile.write ('    /**\n')
    jfile.write ('     * Constructor\n')
    jfile.write ('     */\n')
    jfile.write ('    public ARDeviceController (ARDiscoveryDevice device) throws ARControllerException\n')
    jfile.write ('    {\n')
    jfile.write ('        initOk = false;\n')
    jfile.write ('        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;\n')
    jfile.write ('        \n')
    jfile.write ('        if (device != null)\n')
    jfile.write ('        {\n')
    jfile.write ('            jniDeviceController = nativeNew(device.getNativeDevice());\n')
    jfile.write ('        }\n')
    jfile.write ('        else\n')
    jfile.write ('        {\n')
    jfile.write ('            error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    jfile.write ('        }\n')
    jfile.write ('        \n')
    jfile.write ('        if (jniDeviceController != 0)\n')
    jfile.write ('        {\n')
    jfile.write ('            listeners = new ArrayList<ARDeviceControllerListener>();\n')
    jfile.write ('            streamlisteners = new ArrayList<ARDeviceControllerStreamListener>();\n')
    jfile.write ('            initOk = true;\n')
    jfile.write ('            \n')
    
    for feature in allFeatures:
        jfile.write ('            long '+nativeFeatureName(feature)+' = '+nativeGetFeature(feature)+' (jniDeviceController);\n')
        jfile.write ('            if ('+nativeFeatureName(feature)+' != 0)\n')
        jfile.write ('            {\n')
        jfile.write ('                '+javaFeatureName(feature)+' = new '+javaFeatureClassName(feature)+'('+nativeFeatureName(feature)+');\n')
        jfile.write ('            }\n')
        jfile.write ('            \n')
    jfile.write ('        }\n')
    jfile.write ('\n')
    jfile.write ('        if (error != ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK)\n')
    jfile.write ('        {\n')
    jfile.write ('            throw new ARControllerException (error);\n')
    jfile.write ('        }\n')
    jfile.write ('    }\n')
    jfile.write ('\n')
    jfile.write ('    /**\n')
    jfile.write ('     * Dispose\n')
    jfile.write ('     */\n')
    jfile.write ('    public void dispose()\n')
    jfile.write ('    {\n')
    jfile.write ('        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;\n')
    jfile.write ('        synchronized (this)\n')
    jfile.write ('        {\n')
    jfile.write ('            if(initOk == true)\n')
    jfile.write ('            {\n')
    jfile.write ('                nativeDelete(jniDeviceController);\n')
    jfile.write ('                jniDeviceController = 0;\n')
    jfile.write ('                initOk = false;\n')
    jfile.write ('                \n')
    for feature in allFeatures:
        jfile.write ('                if ('+javaFeatureName(feature)+' != null)\n')
        jfile.write ('                {\n')
        jfile.write ('                    '+javaFeatureName(feature)+'.dispose();\n')
        jfile.write ('                    '+javaFeatureName(feature)+' = null;\n')
        jfile.write ('                }\n')
        jfile.write ('                \n')
    jfile.write ('            }\n')
    jfile.write ('            else\n')
    jfile.write ('            {\n')
    jfile.write ('                error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_ERROR_JNI_INIT;\n')
    jfile.write ('            }\n')
    jfile.write ('        }\n')
    jfile.write ('    }\n')
    jfile.write ('\n')
    jfile.write ('    /**\n')
    jfile.write ('     * Destructor\n')
    jfile.write ('     */\n')
    jfile.write ('    public void finalize () throws Throwable\n')
    jfile.write ('    {\n')
    jfile.write ('        try\n')
    jfile.write ('        {\n')
    jfile.write ('            dispose ();\n')
    jfile.write ('        }\n')
    jfile.write ('        finally\n')
    jfile.write ('        {\n')
    jfile.write ('            super.finalize ();\n')
    jfile.write ('        }\n')
    jfile.write ('    }\n')
    jfile.write ('    \n')
    jfile.write ('    public ARCONTROLLER_ERROR_ENUM start ()\n')
    jfile.write ('    {\n')
    jfile.write ('        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;\n')
    jfile.write ('        synchronized (this)\n')
    jfile.write ('        {\n')
    jfile.write ('            if(initOk == true)\n')
    jfile.write ('            {\n')
    jfile.write ('                int nativeError = nativeStart(jniDeviceController);\n')
    jfile.write ('                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);\n')
    jfile.write ('            }\n')
    jfile.write ('            else\n')
    jfile.write ('            {\n')
    jfile.write ('                error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_ERROR_JNI_INIT;\n')
    jfile.write ('            }\n')
    jfile.write ('        }\n')
    jfile.write ('        \n')
    jfile.write ('        return error;\n')
    jfile.write ('    }\n')
    jfile.write ('    \n')
    jfile.write ('    public ARCONTROLLER_ERROR_ENUM stop ()\n')
    jfile.write ('    {\n')
    jfile.write ('        ARCONTROLLER_ERROR_ENUM error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_OK;\n')
    jfile.write ('        synchronized (this)\n')
    jfile.write ('        {\n')
    jfile.write ('            if(initOk == true)\n')
    jfile.write ('            {\n')
    jfile.write ('                int nativeError = nativeStop(jniDeviceController);\n')
    jfile.write ('                error = ARCONTROLLER_ERROR_ENUM.getFromValue(nativeError);\n')
    jfile.write ('            }\n')
    jfile.write ('            else\n')
    jfile.write ('            {\n')
    jfile.write ('                error = ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_ERROR_JNI_INIT;\n')
    jfile.write ('            }\n')
    jfile.write ('        }\n')
    jfile.write ('        \n')
    jfile.write ('        return error;\n')
    jfile.write ('    }\n')
    jfile.write ('    \n')
    
    for feature in allFeatures:
        jfile.write ('    public '+javaFeatureClassName(feature)+' getFeature'+ ARCapitalize(feature.name)+' ()\n')
        jfile.write ('    {\n')
        jfile.write ('        return '+javaFeatureName(feature)+';\n')
        jfile.write ('    }\n')
        jfile.write ('    \n')
    
    jfile.write ('    public ARControllerDictionary getCommandElements (ARCONTROLLER_DICTIONARY_KEY_ENUM commandKey) throws ARControllerException\n')
    jfile.write ('    {\n')
    jfile.write ('        ARControllerDictionary elementDictionary = null;\n')
    jfile.write ('        \n')
    jfile.write ('        synchronized (this)\n')
    jfile.write ('        {\n')
    jfile.write ('            if(initOk == true)\n')
    jfile.write ('            {\n')
    jfile.write ('                if(commandKey != null)\n')
    jfile.write ('                {\n')
    jfile.write ('                    long nativeElementDictionary = nativeGetCommandElements(jniDeviceController, commandKey.getValue());\n')
    jfile.write ('                    \n')
    jfile.write ('                    elementDictionary = new ARControllerDictionary(nativeElementDictionary);\n')
    jfile.write ('                }\n')
    jfile.write ('            }\n')
    jfile.write ('        }\n')
    jfile.write ('        \n')
    jfile.write ('        return elementDictionary;\n')
    jfile.write ('    }\n')
    
    jfile.write ('    public ARCONTROLLER_DEVICE_STATE_ENUM getState () throws ARControllerException\n')
    jfile.write ('    {\n')
    jfile.write ('        ARCONTROLLER_DEVICE_STATE_ENUM state = ARCONTROLLER_DEVICE_STATE_ENUM.ARCONTROLLER_DEVICE_STATE_MAX;\n')
    jfile.write ('        synchronized (this)\n')
    jfile.write ('        {\n')
    jfile.write ('            if(initOk == true)\n')
    jfile.write ('            {\n')
    jfile.write ('                int nativeState = nativeGetState(jniDeviceController);\n')
    jfile.write ('                state = ARCONTROLLER_DEVICE_STATE_ENUM.getFromValue(nativeState);\n')
    jfile.write ('            }\n')
    jfile.write ('            else\n')
    jfile.write ('            {\n')
    jfile.write ('                throw new ARControllerException(ARCONTROLLER_ERROR_ENUM.ARCONTROLLER_ERROR_JNI_INIT);\n')
    jfile.write ('            }\n')
    jfile.write ('        }\n')
    jfile.write ('        \n')
    jfile.write ('        return state;\n')
    jfile.write ('    }\n')
    jfile.write ('    \n')
    
    jfile.write ('    public synchronized void addListener (ARDeviceControllerListener listener)\n')
    jfile.write ('    {\n')
    jfile.write ('       if (! listeners.contains(listener))\n')
    jfile.write ('       {\n')
    jfile.write ('           listeners.add (listener);\n')
    jfile.write ('       }\n')
    jfile.write ('    }\n')
    jfile.write ('    \n')
    jfile.write ('    public synchronized void removeListener (ARDeviceControllerListener listener)\n')
    jfile.write ('    {\n')
    jfile.write ('        listeners.remove (listener);\n')
    jfile.write ('    }\n')
    jfile.write ('    \n')
    jfile.write ('    public synchronized void addStreamListener (ARDeviceControllerStreamListener listener)\n')
    jfile.write ('    {\n')
    jfile.write ('       if (! streamlisteners.contains(listener))\n')
    jfile.write ('       {\n')
    jfile.write ('           streamlisteners.add (listener);\n')
    jfile.write ('       }\n')
    jfile.write ('    }\n')
    jfile.write ('\n')
    jfile.write ('    public synchronized void removeStreamListener (ARDeviceControllerStreamListener listener)\n')
    jfile.write ('    {\n')
    jfile.write ('        streamlisteners.remove (listener);\n')
    jfile.write ('    }\n')
    jfile.write ('    \n')
    jfile.write ('    private void onStateChanged (int newState, int error)\n')
    jfile.write ('    {\n')
    jfile.write ('        for (ARDeviceControllerListener l : listeners)\n')
    jfile.write ('        {\n')
    jfile.write ('            l.onStateChanged (this, ARCONTROLLER_DEVICE_STATE_ENUM.getFromValue(newState), ARCONTROLLER_ERROR_ENUM.getFromValue(error));\n')
    jfile.write ('        }\n')
    jfile.write ('    }\n')
    jfile.write ('    \n')
    jfile.write ('    private void onCommandReceived (int nativeCommandKey, long elementDictionary)\n')
    jfile.write ('    {\n')
    jfile.write ('        ARCONTROLLER_DICTIONARY_KEY_ENUM commandKey = ARCONTROLLER_DICTIONARY_KEY_ENUM.getFromValue(nativeCommandKey);\n')
    jfile.write ('        \n')
    jfile.write ('        ARControllerDictionary dictionary = new ARControllerDictionary(elementDictionary);\n')
    jfile.write ('        \n')
    jfile.write ('        for (ARDeviceControllerListener l : listeners)\n')
    jfile.write ('        {\n')
    jfile.write ('            l.onCommandReceived (this, ARCONTROLLER_DICTIONARY_KEY_ENUM.getFromValue(nativeCommandKey), dictionary);\n')
    jfile.write ('        }\n')
    jfile.write ('    }\n')
    jfile.write ('    \n')
    jfile.write ('    private void  didReceiveFrameCallback (long data, int dataCapacity, int dataSize, int nativeIsIFrame, int missed)\n')
    jfile.write ('    {\n')
    jfile.write ('        boolean isIFrame = (nativeIsIFrame != 0);\n')
    jfile.write ('        \n')
    jfile.write ('        ARFrame frame = new ARFrame (data, dataCapacity, dataSize, isIFrame, missed);\n')
    jfile.write ('        \n')
    jfile.write ('        for (ARDeviceControllerStreamListener l : streamlisteners)\n')
    jfile.write ('        {\n')
    jfile.write ('            l.onFrameReceived (this, frame);\n')
    jfile.write ('        }\n')
    jfile.write ('        \n')
    jfile.write ('        frame.dispose();\n')
    jfile.write ('    }\n')
    jfile.write ('\n')
    jfile.write ('    private void  timeoutFrameCallback ()\n')
    jfile.write ('    {\n')
    jfile.write ('        for (ARDeviceControllerStreamListener l : streamlisteners)\n')
    jfile.write ('        {\n')
    jfile.write ('            l.onFrameTimeout (this);\n')
    jfile.write ('        }\n')
    jfile.write ('    }\n')
    jfile.write ('}\n')
    
    
    jfile.write ('\n')
    
    jfile.close ()
    
    #################################################
    # Write Device controller JNI c file           #
    #################################################
    
    javaClassName = 'ARDeviceController'
    jniClassName = MODULE_ARCONTROLLER + '_JNI_Device'
    className = 'ARCONTROLLER_JNIDeviceController_t'
    classTag = 'ARCONTROLLER_JNIDEVICE_TAG'

    cFileName = jniClassName + '.c'
    filepath = JNI_C_DIR + cFileName
    cFile = open (filepath, 'w')

    cFile.write ('/**********************************************************\n')
    cFile.write (' *            AUTOGENERATED FILE                          *\n')
    cFile.write (' *             DO NOT MODIFY IT                           *\n')
    cFile.write (' *                                                        *\n')
    cFile.write (' * To add new commands :                                  *\n')
    cFile.write (' *  - Modify ../Xml/commands.xml file                     *\n')
    cFile.write (' *  - Re-run generateFeatureControllers.py script         *\n')
    cFile.write (' *                                                        *\n')
    cFile.write (' **********************************************************/\n')
    cFile.write ('\n')

    cFile.write ('/**\n')
    cFile.write ('* @file '+jniClassName+'\n')
    cFile.write ('* @brief ARDeviceController JNI device c file.\n')
    cFile.write ('*/\n')
    cFile.write ('\n')
    
    cFile.write ('/*****************************************\n')
    cFile.write (' *\n')
    cFile.write (' *             include file :\n')
    cFile.write (' *\n')
    cFile.write (' *****************************************/\n')
    cFile.write ('\n')
    cFile.write ('#include <jni.h>\n')
    cFile.write ('#include <stdlib.h>\n')
    cFile.write ('\n')
    cFile.write ('#include <libARSAL/ARSAL_Print.h>\n')
    cFile.write ('\n')
    cFile.write ('#include <libARDiscovery/ARDISCOVERY_Device.h>\n')
    cFile.write ('\n')
    cFile.write ('#include <libARController/ARCONTROLLER_Error.h>\n')
    cFile.write ('#include <libARController/ARCONTROLLER_Device.h>\n')
    cFile.write ('\n')
    cFile.write ('/*****************************************\n')
    cFile.write (' *\n')
    cFile.write (' *             define :\n')
    cFile.write (' *\n')
    cFile.write (' *****************************************/\n')
    cFile.write ('\n')
    cFile.write ('#define ARCONTROLLER_JNIDEVICE_TAG "JNIControllerDevice"\n')
    cFile.write ('\n')
    cFile.write ('/**\n')
    cFile.write (' * @brief \n')
    cFile.write (' */\n')
    cFile.write ('typedef struct\n')
    cFile.write ('{\n')
    cFile.write ('    ARCONTROLLER_Device_t *nativeDeviceController; /**< native Device Controller*/\n')
    cFile.write ('    jobject jDeviceController; /**< java DeviceController*/\n')
    cFile.write ('}ARCONTROLLER_JNIDeviceController_t;\n')
    cFile.write ('\n')
    cFile.write ('static JavaVM *ARCONTROLLER_JNIDEVICE_VM; /**< reference to the java virtual machine */\n')
    cFile.write ('\n')
    cFile.write ('static jmethodID ARCONTROLLER_JNIDEVICE_METHOD_ON_STATE_CHANGED;\n')
    cFile.write ('static jmethodID ARCONTROLLER_JNIDEVICE_METHOD_ON_COMMAND_RECEIVED;\n')
    cFile.write ('static jmethodID ARCONTROLLER_JNIDEVICE_METHOD_DID_RECEIVED_FRAME_CALLBACK;\n')
    cFile.write ('static jmethodID ARCONTROLLER_JNIDEVICE_METHOD_TIMEOUT_FRAME_CALLBACK;\n')
    cFile.write ('\n')
    cFile.write ('/*****************************************\n')
    cFile.write (' *\n')
    cFile.write (' *             private header:\n')
    cFile.write (' *\n')
    cFile.write (' *****************************************/\n')
    cFile.write ('ARCONTROLLER_JNIDeviceController_t *ARCONTROLLER_JNI_Device_NewJNIDeviceController (JNIEnv *env, jobject thizz, ARDISCOVERY_Device_t *discoveryDevice, eARCONTROLLER_ERROR *error);\n')
    cFile.write ('void ARCONTROLLER_JNI_Device_DeleteJNIDeviceController (JNIEnv *env, ARCONTROLLER_JNIDeviceController_t **jniDeviceController);\n')
    cFile.write ('\n')
    cFile.write ('void ARCONTROLLER_JNI_Device_StateChanged (eARCONTROLLER_DEVICE_STATE newState, eARCONTROLLER_ERROR error, void *customData);\n')
    cFile.write ('void ARCONTROLLER_JNI_Device_CommandReceived (eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_ELEMENT_t *elementDictionary, void *customData);\n')
    cFile.write ('\n')
    cFile.write ('void ARCONTROLLER_JNI_Device_DidReceiveFrameCallback (ARCONTROLLER_Frame_t *frame, void *customData);\n')
    cFile.write ('void ARCONTROLLER_JNI_Device_TimeoutFrameCallback (void *customData);\n')
    cFile.write ('\n')
    cFile.write ('/*****************************************\n')
    cFile.write (' *\n')
    cFile.write (' *             implementation :\n')
    cFile.write (' *\n')
    cFile.write (' *****************************************/\n')
    cFile.write ('\n')
    cFile.write ('static JavaVM* ARCONTROLLER_JNIDEVICE_VM = NULL; /** reference to the java virtual machine */\n')
    cFile.write ('\n')
    cFile.write ('/**\n')
    cFile.write (' * @brief save the reference to the java virtual machine\n')
    cFile.write (' * @note this function is automatically call on the JNI startup\n')
    cFile.write (' * @param[in] VM reference to the java virtual machine\n')
    cFile.write (' * @param[in] reserved data reserved\n')
    cFile.write (' * @return JNI version\n')
    cFile.write (' */\n')
    cFile.write ('JNIEXPORT jint JNICALL\n')
    cFile.write ('JNI_OnLoad(JavaVM *VM, void *reserved)\n')
    cFile.write ('{\n')
    cFile.write ('    ARSAL_PRINT(ARSAL_PRINT_DEBUG, ARCONTROLLER_JNIDEVICE_TAG, "Library has been loaded");\n')
    cFile.write ('\n')
    cFile.write ('    /* Saving the reference to the java virtual machine */\n')
    cFile.write ('    ARCONTROLLER_JNIDEVICE_VM = VM;\n')
    cFile.write ('\n')
    cFile.write ('    /* Return the JNI version */\n')
    cFile.write ('    return JNI_VERSION_1_6;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    cFile.write ('JNIEXPORT void JNICALL\n')
    cFile.write ('Java_com_parrot_arsdk_arcontroller_ARDeviceController_nativeStaticInit (JNIEnv *env, jclass class)\n')
    cFile.write ('{    \n')
    cFile.write ('    // local declarations\n')
    cFile.write ('    jclass jARDeviceControllerCls = NULL;\n')
    cFile.write ('    \n')
    cFile.write ('    // get ARDeviceController\n')
    cFile.write ('    jARDeviceControllerCls = (*env)->FindClass(env, "com/parrot/arsdk/arcontroller/ARDeviceController");\n')
    cFile.write ('    \n')
    cFile.write ('    ARCONTROLLER_JNIDEVICE_METHOD_ON_STATE_CHANGED = (*env)->GetMethodID (env, jARDeviceControllerCls, "onStateChanged", "(II)V");\n')
    cFile.write ('    ARCONTROLLER_JNIDEVICE_METHOD_DID_RECEIVED_FRAME_CALLBACK = (*env)->GetMethodID (env, jARDeviceControllerCls, "didReceiveFrameCallback", "(JIIII)V");\n')
    cFile.write ('    ARCONTROLLER_JNIDEVICE_METHOD_TIMEOUT_FRAME_CALLBACK = (*env)->GetMethodID (env, jARDeviceControllerCls, "timeoutFrameCallback", "()V");    \n')
    cFile.write ('    ARCONTROLLER_JNIDEVICE_METHOD_ON_COMMAND_RECEIVED = (*env)->GetMethodID (env, jARDeviceControllerCls, "onCommandReceived", "(IJ)V");    \n')
    cFile.write ('    \n')
    cFile.write ('    // cleanup\n')
    cFile.write ('    (*env)->DeleteLocalRef (env, jARDeviceControllerCls);\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    cFile.write ('/**\n')
    cFile.write (' * @brief Create and initialize a new device\n')
    cFile.write (' * @param env reference to the java environment\n')
    cFile.write (' * @param thizz reference to the object calling this function\n')
    cFile.write (' * @return new jni device object\n')
    cFile.write (' */\n')
    cFile.write ('JNIEXPORT jlong JNICALL\n')
    cFile.write ('Java_com_parrot_arsdk_arcontroller_ARDeviceController_nativeNew (JNIEnv *env, jobject thizz, jlong jDevice)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Create the Device --\n')
    cFile.write ('\n')
    cFile.write ('    // local declarations\n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    //ARCONTROLLER_Device_t *deviceController = NULL;\n')
    cFile.write ('    ARCONTROLLER_JNIDeviceController_t *jniDeviceController = NULL;\n')
    cFile.write ('    ARDISCOVERY_Device_t *device = (ARDISCOVERY_Device_t*) (intptr_t) jDevice;\n')
    cFile.write ('\n')
    cFile.write ('    jclass exceptionCls = NULL;\n')
    cFile.write ('    jmethodID exceptionMethodInit = NULL;\n')
    cFile.write ('    jthrowable exception = NULL;\n')
    cFile.write ('\n')
    cFile.write ('    // allocate the JNI Device Controller\n')
    cFile.write ('    jniDeviceController = ARCONTROLLER_JNI_Device_NewJNIDeviceController (env, thizz, device, &error);\n')
    cFile.write ('    \n')
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_Device_AddStateChangedCallback (jniDeviceController->nativeDeviceController, ARCONTROLLER_JNI_Device_StateChanged, jniDeviceController);\n')
    cFile.write ('    }\n')
    cFile.write ('\n')
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_Device_AddCommandReceivedCallback (jniDeviceController->nativeDeviceController, ARCONTROLLER_JNI_Device_CommandReceived, jniDeviceController);\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    cFile.write ('    if (error == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        error = ARCONTROLLER_Device_SetVideoReceiveCallback (jniDeviceController->nativeDeviceController, ARCONTROLLER_JNI_Device_DidReceiveFrameCallback, ARCONTROLLER_JNI_Device_TimeoutFrameCallback , jniDeviceController);\n')
    cFile.write ('        if(error == ARCONTROLLER_ERROR_NO_VIDEO)\n')
    cFile.write ('        {\n')
    cFile.write ('            ARSAL_PRINT(ARSAL_PRINT_INFO, ARCONTROLLER_JNIDEVICE_TAG, "This device has no video stream");\n')
    cFile.write ('            error = ARCONTROLLER_OK;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('\n')
    cFile.write ('    if (error != ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        // Delete the JNI device controller\n')
    cFile.write ('        ARCONTROLLER_JNI_Device_DeleteJNIDeviceController (env, &jniDeviceController);\n')
    cFile.write ('        \n')
    cFile.write ('        // throw the exception\n')
    cFile.write ('        exceptionCls = (*env)->FindClass(env, "com/parrot/arsdk/arcontroller/ARControllerException");\n')
    cFile.write ('        exceptionMethodInit = (*env)->GetMethodID(env, exceptionCls, "<init>", "(I)V");\n')
    cFile.write ('        exception = (*env)->NewObject(env, exceptionCls, exceptionMethodInit, error);\n')
    cFile.write ('        (*env)->Throw(env, exception);\n')
    cFile.write ('    }\n')
    cFile.write ('\n')
    cFile.write ('    return (long) jniDeviceController;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    cFile.write ('/**\n')
    cFile.write (' * @brief delete the Device\n')
    cFile.write (' * @param env reference to the java environment\n')
    cFile.write (' * @param thizz reference to the object calling this function\n')
    cFile.write (' * @param jDevice the ARCONTROLLER_Device_t to delete\n')
    cFile.write (' */\n')
    cFile.write ('JNIEXPORT void JNICALL\n')
    cFile.write ('Java_com_parrot_arsdk_arcontroller_ARDeviceController_nativeDelete (JNIEnv *env, jobject thizz, jlong jDeviceController)\n')
    cFile.write ('{\n')
    cFile.write ('    // -- Delete the DeviceController --\n')
    cFile.write ('\n')
    cFile.write ('    // local declarations\n')
    cFile.write ('    ARCONTROLLER_JNIDeviceController_t *jniDeviceController = (ARCONTROLLER_JNIDeviceController_t*) (intptr_t) jDeviceController;\n')
    cFile.write ('\n')
    cFile.write ('    ARCONTROLLER_JNI_Device_DeleteJNIDeviceController (env, &jniDeviceController);\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    cFile.write ('JNIEXPORT jint JNICALL\n')
    cFile.write ('Java_com_parrot_arsdk_arcontroller_ARDeviceController_nativeStart (JNIEnv *env, jobject thizz, jlong jDeviceController)\n')
    cFile.write ('{\n')
    cFile.write ('    // local declarations\n')
    cFile.write ('    ARCONTROLLER_JNIDeviceController_t *jniDeviceController = (ARCONTROLLER_JNIDeviceController_t*) (intptr_t) jDeviceController;\n')
    cFile.write ('    \n')
    cFile.write ('    return ARCONTROLLER_Device_Start (jniDeviceController->nativeDeviceController);\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    cFile.write ('JNIEXPORT jint JNICALL\n')
    cFile.write ('Java_com_parrot_arsdk_arcontroller_ARDeviceController_nativeStop (JNIEnv *env, jobject thizz, jlong jDeviceController)\n')
    cFile.write ('{\n')
    cFile.write ('    // local declarations\n')
    cFile.write ('    ARCONTROLLER_JNIDeviceController_t *jniDeviceController = (ARCONTROLLER_JNIDeviceController_t*) (intptr_t) jDeviceController;\n')
    cFile.write ('\n')
    cFile.write ('    return ARCONTROLLER_Device_Stop (jniDeviceController->nativeDeviceController);\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    for feature in allFeatures:
        cFile.write ('JNIEXPORT jlong JNICALL\n')
        cFile.write ('Java_com_parrot_arsdk_arcontroller_ARDeviceController_'+nativeGetFeature(feature)+' (JNIEnv *env, jobject thizz, jlong jDeviceController)\n')
        cFile.write ('{\n')
        cFile.write ('    // local declarations\n')
        cFile.write ('    ARCONTROLLER_JNIDeviceController_t *jniDeviceController = (ARCONTROLLER_JNIDeviceController_t*) (intptr_t) jDeviceController;\n')
        cFile.write ('\n')
        cFile.write ('    return (long) jniDeviceController->nativeDeviceController->'+ARUncapitalize(feature.name)+';\n')
        cFile.write ('}\n')
        cFile.write ('\n')
        
    cFile.write ('JNIEXPORT jlong JNICALL\n')
    cFile.write ('Java_com_parrot_arsdk_arcontroller_ARDeviceController_nativeGetCommandElements (JNIEnv *env, jobject thizz, jlong jDeviceController, jint commandKey)\n')
    cFile.write ('{\n')
    cFile.write ('    // local declarations\n')
    cFile.write ('    ARCONTROLLER_JNIDeviceController_t *jniDeviceController = (ARCONTROLLER_JNIDeviceController_t*) (intptr_t) jDeviceController;\n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    ARCONTROLLER_DICTIONARY_ELEMENT_t *elements = NULL;\n')
    cFile.write ('\n')
    cFile.write ('    jclass exceptionCls = NULL;\n')
    cFile.write ('    jmethodID exceptionMethodInit = NULL;\n')
    cFile.write ('    jthrowable exception = NULL;\n')
    cFile.write ('\n')
    cFile.write ('    elements = ARCONTROLLER_Device_GetCommandElements (jniDeviceController->nativeDeviceController, commandKey, &error);\n')
    cFile.write ('\n')
    cFile.write ('    if (error != ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        // Delete the JNI device controller\n')
    cFile.write ('        ARCONTROLLER_JNI_Device_DeleteJNIDeviceController (env, &jniDeviceController);\n')
    cFile.write ('        \n')
    cFile.write ('        // throw the exception\n')
    cFile.write ('        exceptionCls = (*env)->FindClass(env, "com/parrot/arsdk/arcontroller/ARControllerException");\n')
    cFile.write ('        exceptionMethodInit = (*env)->GetMethodID(env, exceptionCls, "<init>", "(I)V");\n')
    cFile.write ('        exception = (*env)->NewObject(env, exceptionCls, exceptionMethodInit, error);\n')
    cFile.write ('        (*env)->Throw(env, exception);\n')
    cFile.write ('    }\n')
    cFile.write ('\n')
    cFile.write ('    return (long) elements;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    
    cFile.write ('JNIEXPORT jint JNICALL\n')
    cFile.write ('Java_com_parrot_arsdk_arcontroller_ARDeviceController_nativeGetState (JNIEnv *env, jobject thizz, jlong jDeviceController)\n')
    cFile.write ('{\n')
    cFile.write ('    // local declarations\n')
    cFile.write ('    ARCONTROLLER_JNIDeviceController_t *jniDeviceController = (ARCONTROLLER_JNIDeviceController_t*) (intptr_t) jDeviceController;\n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    eARCONTROLLER_DEVICE_STATE state = ARCONTROLLER_DEVICE_STATE_MAX;\n')
    cFile.write ('\n')
    cFile.write ('    jclass exceptionCls = NULL;\n')
    cFile.write ('    jmethodID exceptionMethodInit = NULL;\n')
    cFile.write ('    jthrowable exception = NULL;\n')
    cFile.write ('\n')
    cFile.write ('    state = ARCONTROLLER_Device_GetState (jniDeviceController->nativeDeviceController, &error);\n')
    cFile.write ('\n')
    cFile.write ('    if (error != ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        // throw the exception\n')
    cFile.write ('        exceptionCls = (*env)->FindClass(env, "com/parrot/arsdk/arcontroller/ARControllerException");\n')
    cFile.write ('        exceptionMethodInit = (*env)->GetMethodID(env, exceptionCls, "<init>", "(I)V");\n')
    cFile.write ('        exception = (*env)->NewObject(env, exceptionCls, exceptionMethodInit, error);\n')
    cFile.write ('        (*env)->Throw(env, exception);\n')
    cFile.write ('    }\n')
    cFile.write ('\n')
    cFile.write ('    return state;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
        
    cFile.write ('/*****************************************\n')
    cFile.write (' *\n')
    cFile.write (' *             private implementation:\n')
    cFile.write (' *\n')
    cFile.write (' *****************************************/\n')
    cFile.write ('\n')
    cFile.write ('ARCONTROLLER_JNIDeviceController_t *ARCONTROLLER_JNI_Device_NewJNIDeviceController (JNIEnv *env, jobject thizz, ARDISCOVERY_Device_t *discoveryDevice, eARCONTROLLER_ERROR *error)\n')
    cFile.write ('{\n')
    cFile.write ('    ARCONTROLLER_JNIDeviceController_t *jniDeviceController = malloc (sizeof (ARCONTROLLER_JNIDeviceController_t));\n')
    cFile.write ('    \n')
    cFile.write ('    if (jniDeviceController != NULL)\n')
    cFile.write ('    {\n')
    cFile.write ('        // Create a new native deviceController\n')
    cFile.write ('        jniDeviceController->nativeDeviceController = ARCONTROLLER_Device_New (discoveryDevice, error);\n')
    cFile.write ('        \n')
    cFile.write ('        // create a global reference of the java object\n')
    cFile.write ('        jniDeviceController->jDeviceController = (*env)->NewGlobalRef (env, thizz);\n')
    cFile.write ('    }\n')
    cFile.write ('    else if (error != NULL)\n')
    cFile.write ('    {\n')
    cFile.write ('        *error = ARCONTROLLER_ERROR_ALLOC;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    cFile.write ('    return jniDeviceController;\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    cFile.write ('void ARCONTROLLER_JNI_Device_DeleteJNIDeviceController (JNIEnv *env, ARCONTROLLER_JNIDeviceController_t **jniDeviceController)\n')
    cFile.write ('{\n')
    cFile.write ('    if (jniDeviceController != NULL)\n')
    cFile.write ('    {\n')
    cFile.write ('        if ((*jniDeviceController) != NULL)\n')
    cFile.write ('        {\n')
    cFile.write ('            // Delete native deviceController\n')
    cFile.write ('            ARCONTROLLER_Device_Delete (&((*jniDeviceController)->nativeDeviceController));\n')
    cFile.write ('            \n')
    cFile.write ('            // Delete global references\n')
    cFile.write ('            (*env)->DeleteGlobalRef (env, (*jniDeviceController)->jDeviceController);\n')
    cFile.write ('            (*jniDeviceController)->jDeviceController = NULL;\n')
    cFile.write ('            \n')
    cFile.write ('            free (*jniDeviceController);\n')
    cFile.write ('            (*jniDeviceController) = NULL;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    cFile.write ('// called when the state of the device controller has changed\n')
    cFile.write ('void ARCONTROLLER_JNI_Device_StateChanged (eARCONTROLLER_DEVICE_STATE newState, eARCONTROLLER_ERROR error, void *customData)\n')
    cFile.write ('{\n')
    cFile.write ('    // local declarations\n')
    cFile.write ('    eARCONTROLLER_ERROR localError = ARCONTROLLER_OK;\n')
    cFile.write ('    JNIEnv* env = NULL;\n')
    cFile.write ('    jint getEnvResult = JNI_OK;\n')
    cFile.write ('    jint attachResult = 1;\n')
    cFile.write ('    \n')
    cFile.write ('    ARCONTROLLER_JNIDeviceController_t *jniDeviceController = (ARCONTROLLER_JNIDeviceController_t*) (intptr_t) customData;\n')
    cFile.write ('        \n')
    cFile.write ('    if ((jniDeviceController == NULL) ||\n')
    cFile.write ('        (jniDeviceController->jDeviceController == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        localError = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        // get the environment\n')
    cFile.write ('        getEnvResult = (*ARCONTROLLER_JNIDEVICE_VM)->GetEnv(ARCONTROLLER_JNIDEVICE_VM, (void **) &env, JNI_VERSION_1_6);\n')
    cFile.write ('\n')
    cFile.write ('        // if no environment then attach the thread to the virtual machine\n')
    cFile.write ('        if (getEnvResult == JNI_EDETACHED)\n')
    cFile.write ('        {\n')
    cFile.write ('            ARSAL_PRINT(ARSAL_PRINT_DEBUG, ARCONTROLLER_JNIDEVICE_TAG, "attach the thread to the virtual machine ...");\n')
    cFile.write ('            attachResult = (*ARCONTROLLER_JNIDEVICE_VM)->AttachCurrentThread(ARCONTROLLER_JNIDEVICE_VM, &env, NULL);\n')
    cFile.write ('        }\n')
    cFile.write ('\n')
    cFile.write ('        if (env == NULL)\n')
    cFile.write ('        {\n')
    cFile.write ('            localError = ARCONTROLLER_ERROR_JNI_ENV;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        // java onStateChanged callback\n')
    cFile.write ('        (*env)->CallVoidMethod(env, jniDeviceController->jDeviceController, ARCONTROLLER_JNIDEVICE_METHOD_ON_STATE_CHANGED, newState, error);\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    cFile.write ('    // if the thread has been attached then detach the thread from the virtual machine\n')
    cFile.write ('    if ((getEnvResult == JNI_EDETACHED) && (env != NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        (*ARCONTROLLER_JNIDEVICE_VM)->DetachCurrentThread(ARCONTROLLER_JNIDEVICE_VM);\n')
    cFile.write ('    }\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    cFile.write ('// called when a command has been received from the drone\n')
    cFile.write ('void ARCONTROLLER_JNI_Device_CommandReceived (eARCONTROLLER_DICTIONARY_KEY commandKey, ARCONTROLLER_DICTIONARY_ELEMENT_t *elementDictionary, void *customData)\n')
    cFile.write ('{\n')
    cFile.write ('    // local declarations\n')
    cFile.write ('    eARCONTROLLER_ERROR localError = ARCONTROLLER_OK;\n')
    cFile.write ('    JNIEnv* env = NULL;\n')
    cFile.write ('    jint getEnvResult = JNI_OK;\n')
    cFile.write ('    jint attachResult = 1;\n')
    cFile.write ('    \n')
    cFile.write ('    ARCONTROLLER_JNIDeviceController_t *jniDeviceController = (ARCONTROLLER_JNIDeviceController_t*) (intptr_t) customData;\n')
    cFile.write ('    eARCONTROLLER_ERROR error = ARCONTROLLER_OK;\n')
    cFile.write ('    \n')
    cFile.write ('    if ((jniDeviceController == NULL) ||\n')
    cFile.write ('        (jniDeviceController->jDeviceController == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        localError = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        // get the environment\n')
    cFile.write ('        getEnvResult = (*ARCONTROLLER_JNIDEVICE_VM)->GetEnv(ARCONTROLLER_JNIDEVICE_VM, (void **) &env, JNI_VERSION_1_6);\n')
    cFile.write ('\n')
    cFile.write ('        // if no environment then attach the thread to the virtual machine\n')
    cFile.write ('        if (getEnvResult == JNI_EDETACHED)\n')
    cFile.write ('        {\n')
    cFile.write ('            ARSAL_PRINT(ARSAL_PRINT_DEBUG, ARCONTROLLER_JNIDEVICE_TAG, "attach the thread to the virtual machine ...");\n')
    cFile.write ('            attachResult = (*ARCONTROLLER_JNIDEVICE_VM)->AttachCurrentThread(ARCONTROLLER_JNIDEVICE_VM, &env, NULL);\n')
    cFile.write ('        }\n')
    cFile.write ('\n')
    cFile.write ('        if (env == NULL)\n')
    cFile.write ('        {\n')
    cFile.write ('            localError = ARCONTROLLER_ERROR_JNI_ENV;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        // java onCommandReceived callback\n')
    cFile.write ('        (*env)->CallVoidMethod(env, jniDeviceController->jDeviceController, ARCONTROLLER_JNIDEVICE_METHOD_ON_COMMAND_RECEIVED, commandKey, (long) elementDictionary);\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    cFile.write ('    // if the thread has been attached then detach the thread from the virtual machine\n')
    cFile.write ('    if ((getEnvResult == JNI_EDETACHED) && (env != NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        (*ARCONTROLLER_JNIDEVICE_VM)->DetachCurrentThread(ARCONTROLLER_JNIDEVICE_VM);\n')
    cFile.write ('    }\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    cFile.write ('void ARCONTROLLER_JNI_Device_DidReceiveFrameCallback (ARCONTROLLER_Frame_t *frame, void *customData)\n')
    cFile.write ('{\n')
    cFile.write ('    // local declarations\n')
    cFile.write ('    eARCONTROLLER_ERROR localError = ARCONTROLLER_OK;\n')
    cFile.write ('    JNIEnv* env = NULL;\n')
    cFile.write ('    jint getEnvResult = JNI_OK;\n')
    cFile.write ('    jint attachResult = 1;\n')
    cFile.write ('    \n')
    cFile.write ('    jlong data = 0;\n')
    cFile.write ('    jint dataCapacity = 0;\n')
    cFile.write ('    jint dataSize = 0;\n')
    cFile.write ('    jint isIFrame = 0;\n')
    cFile.write ('    jint missed = 0;\n')
    cFile.write ('    \n')
    cFile.write ('    ARCONTROLLER_JNIDeviceController_t *jniDeviceController = (ARCONTROLLER_JNIDeviceController_t*) (intptr_t) customData;\n')
    cFile.write ('        \n')
    cFile.write ('    if ((jniDeviceController == NULL) ||\n')
    cFile.write ('        (jniDeviceController->jDeviceController == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        localError = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        // get the environment\n')
    cFile.write ('        getEnvResult = (*ARCONTROLLER_JNIDEVICE_VM)->GetEnv(ARCONTROLLER_JNIDEVICE_VM, (void **) &env, JNI_VERSION_1_6);\n')
    cFile.write ('\n')
    cFile.write ('        // if no environment then attach the thread to the virtual machine\n')
    cFile.write ('        if (getEnvResult == JNI_EDETACHED)\n')
    cFile.write ('        {\n')
    cFile.write ('            ARSAL_PRINT(ARSAL_PRINT_DEBUG, ARCONTROLLER_JNIDEVICE_TAG, "attach the thread to the virtual machine ...");\n')
    cFile.write ('            attachResult = (*ARCONTROLLER_JNIDEVICE_VM)->AttachCurrentThread(ARCONTROLLER_JNIDEVICE_VM, &env, NULL);\n')
    cFile.write ('        }\n')
    cFile.write ('\n')
    cFile.write ('        if (env == NULL)\n')
    cFile.write ('        {\n')
    cFile.write ('            localError = ARCONTROLLER_ERROR_JNI_ENV;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        \n')
    cFile.write ('        if (frame != NULL)\n')
    cFile.write ('        {\n')
    cFile.write ('            data = (long)frame->data;\n')
    cFile.write ('            dataCapacity = frame->capacity;\n')
    cFile.write ('            dataSize = frame->used;\n')
    cFile.write ('            isIFrame = frame->isIFrame;\n')
    cFile.write ('            missed = frame->missed;\n')
    cFile.write ('        }\n')
    cFile.write ('                \n')
    cFile.write ('        // java onStateChanged callback\n')
    cFile.write ('        (*env)->CallVoidMethod(env, jniDeviceController->jDeviceController, ARCONTROLLER_JNIDEVICE_METHOD_DID_RECEIVED_FRAME_CALLBACK, data, dataCapacity, dataSize, isIFrame, missed);\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    cFile.write ('    // if the thread has been attached then detach the thread from the virtual machine\n')
    cFile.write ('    if ((getEnvResult == JNI_EDETACHED) && (env != NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        (*ARCONTROLLER_JNIDEVICE_VM)->DetachCurrentThread(ARCONTROLLER_JNIDEVICE_VM);\n')
    cFile.write ('    }\n')
    cFile.write ('}\n')
    cFile.write ('\n')
    cFile.write ('void ARCONTROLLER_JNI_Device_TimeoutFrameCallback (void *customData)\n')
    cFile.write ('{\n')
    cFile.write ('    // local declarations\n')
    cFile.write ('    eARCONTROLLER_ERROR localError = ARCONTROLLER_OK;\n')
    cFile.write ('    JNIEnv* env = NULL;\n')
    cFile.write ('    jint getEnvResult = JNI_OK;\n')
    cFile.write ('    jint attachResult = 1;\n')
    cFile.write ('    \n')
    cFile.write ('    ARCONTROLLER_JNIDeviceController_t *jniDeviceController = (ARCONTROLLER_JNIDeviceController_t*) (intptr_t) customData;\n')
    cFile.write ('        \n')
    cFile.write ('    if ((jniDeviceController == NULL) ||\n')
    cFile.write ('        (jniDeviceController->jDeviceController == NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        localError = ARCONTROLLER_ERROR_BAD_PARAMETER;\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        // get the environment\n')
    cFile.write ('        getEnvResult = (*ARCONTROLLER_JNIDEVICE_VM)->GetEnv(ARCONTROLLER_JNIDEVICE_VM, (void **) &env, JNI_VERSION_1_6);\n')
    cFile.write ('\n')
    cFile.write ('        // if no environment then attach the thread to the virtual machine\n')
    cFile.write ('        if (getEnvResult == JNI_EDETACHED)\n')
    cFile.write ('        {\n')
    cFile.write ('            ARSAL_PRINT(ARSAL_PRINT_DEBUG, ARCONTROLLER_JNIDEVICE_TAG, "attach the thread to the virtual machine ...");\n')
    cFile.write ('            attachResult = (*ARCONTROLLER_JNIDEVICE_VM)->AttachCurrentThread(ARCONTROLLER_JNIDEVICE_VM, &env, NULL);\n')
    cFile.write ('        }\n')
    cFile.write ('\n')
    cFile.write ('        if (env == NULL)\n')
    cFile.write ('        {\n')
    cFile.write ('            localError = ARCONTROLLER_ERROR_JNI_ENV;\n')
    cFile.write ('        }\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    cFile.write ('    if (localError == ARCONTROLLER_OK)\n')
    cFile.write ('    {\n')
    cFile.write ('        // java onStateChanged callback\n')
    cFile.write ('        (*env)->CallVoidMethod(env, jniDeviceController->jDeviceController, ARCONTROLLER_JNIDEVICE_METHOD_TIMEOUT_FRAME_CALLBACK);\n')
    cFile.write ('    }\n')
    cFile.write ('    \n')
    cFile.write ('    // if the thread has been attached then detach the thread from the virtual machine\n')
    cFile.write ('    if ((getEnvResult == JNI_EDETACHED) && (env != NULL))\n')
    cFile.write ('    {\n')
    cFile.write ('        (*ARCONTROLLER_JNIDEVICE_VM)->DetachCurrentThread(ARCONTROLLER_JNIDEVICE_VM);\n')
    cFile.write ('    }\n')
    cFile.write ('}\n')
    cFile.write ('\n')
